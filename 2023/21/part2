#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re

debug=True
def p(obj):
    if type(obj) in [str,int]:
        print(obj)
    else:
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    data = input
    return data

def getPos(x,y):
    global gardenMap
    return gardenMap[y][x]

def findStart():
    global gardenMap
    for y in range(len(gardenMap)):
        x = gardenMap[y].find('S')
        if x > -1:
            result = (x,y)
            break

    return result

def makeXYID(x,y):
    return '{},{}'.format(x,y)

def splitID(xyID):
    return [int(a) for a in xyID.split(',')]

def addRocks():
    global gardenMap, gardenMapX, gardemMapY, rocks
    for y in range(gardemMapY):
        for x in range(gardenMapX):
            if gardenMap[y][x] == '#':
                xyID = makeXYID(x,y)
                rocks[xyID] = True

def isRock(xyID):
    global rocks
    x,y = splitID(xyID)
    x = x % gardenMapX
    y = y % gardemMapY
    thisXYID = makeXYID(x,y)
    return thisXYID in rocks

def addEven(xyID):
    global evens
    evens[xyID] = True

def isEven(xyID):
    global evens
    return xyID in evens

def addOdd(xyID):
    global odds
    odds[xyID] = True

def isOdd(xyID):
    global odds
    return xyID in odds

def addNew(xyID):
    global news
    news[xyID] = True

def isNew(xyID):
    global news
    return xyID in news

def isOnMap(xyID):
    global gardenMap
    x,y = splitID(xyID)
    return ((0 <= x < gardenMapX) and (0 <= y < gardemMapY))

def findNextNews(xyID):
    result = {}
    x,y = splitID(xyID)
    for dy in range(-1,2):
        for dx in range(-1,2):
            if ((dx == 0) or (dy == 0)) and dx != dy :
                # p("x: {}, y: {}, dx: {}, dy: {}".format(x,y,dx,dy))
                newX = x+dx
                newY = y+dy
                newXYID = makeXYID(newX,newY)
                # p("newX: {}, newY: {}, ID: {}".format(newX,newY,newXYID))

                if not (isEven(newXYID) or isOdd(newXYID) or isRock(newXYID) or isNew(newXYID)):
                    result[newXYID] = True
    return result
    
debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

gardenMap = parseInput(sourceInput)
gardenMapX = len(gardenMap[0])
gardemMapY = len(gardenMap)
# pd(gardenMap)

startX,startY = findStart()

evens = {}
odds = {}
rocks = {}
news = {}

addRocks()
p("gardenSpaces: {}".format((gardenMapX*gardemMapY)-len(rocks)))

p((startX+startY)%2)

counter = [0,0]
for y in range(len(gardenMap)):
    for x in range(len(gardenMap[0])):
        if not isRock(makeXYID(x,y)):
            counter[(x+y)%2] += 1

p(counter)

# initialize
steps = 0
xyID = makeXYID(startX,startY)
addNew(xyID)
addEven(xyID)

record = []
breakTime = 10
stepsNeeded = 26501365
while steps < breakTime:
    steps += 1
    # pd("step: {}, new: {}, evens: {}".format(steps,len(news),len(evens)))
    if steps % 100 == 0:
        p("steps: {}, news: {}".format(steps,len(news)))
    nextNews = {}
    for xyID in news.keys():
        thisNews = findNextNews(xyID)
        nextNews.update(thisNews)
    
    news = nextNews
    if (steps % 2) == 0:
        evens.update(nextNews)
    else: 
        odds.update(nextNews)

    if (steps-65)%131 == 0:
        if steps % 2 == 0:
            count = len(evens)
        else:
            count = len(odds)
        f = int((steps-65)/131)
        record.append([f,steps,count])




# print(len(evens))
# p(evens)

# p(record)

for r in range(len(record)):
    f,steps,count = record[r]
    p("f: {}, steps: {}, count: {}".format(f,steps,count))