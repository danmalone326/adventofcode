#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re

def p(obj):
    print(json.dumps(obj, indent=2))

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

digitMap = [
    ["one","1"],
    ["two","2"],
    ["three","3"],
    ["four","4"],
    ["five","5"],
    ["six","6"],
    ["seven","7"],
    ["eight","8"],
    ["nine","9"],
    ["zero","0"]
]
def replaceDigitStrings(str):
    temp = ""

    for i in range(len(str)):
        strPart = str[i::]
        if (re.match(r'^\d', strPart)):
            temp += strPart[0]
        else:        
            for map in digitMap:
                pattern = r'^' + re.escape(map[0])
                if (re.match(pattern, strPart)):
                    temp += map[1]

    return temp

input = getInput()
# p(input)

answer = 0
for line in input:
    mappedLine = replaceDigitStrings(line)
    # p([line,mappedLine])
    digits = re.findall('\d', mappedLine )
    # p(digits)
    cv = int(digits[0] + digits[-1])
    # p(cv)
    answer += cv

p(answer)

# data = arrayFromGridOfDigits(input)
# p(data)

# data = arrayOfIntFromCSV(input[0])
# p(data)