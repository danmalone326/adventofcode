#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re

def p(obj):
    print(json.dumps(obj, indent=2))

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def getChar(data,x,y):
    if (x<0 or y<0 or x>=len(data[0]) or y>=len(data)):
        char = "."
    else:
        char = data[y][x]
    
    return char

def isSymbol(data,x,y):
    result = True
    char = getChar(data,x,y)
    if (char.isdigit() or (char == '.')):
        result = False
    return result

def nextNumber(data,startX,startY):
    xPos = startX
    yPos = startY

    foundNumber = -1

    # result is the number, x and y of start of number and length
    result = (-1,0,0,0) # -1 means nothing found, so we're done

    pattern = re.compile(r'\d+')
    while (True):
        matches = pattern.finditer(data[yPos])
        results = [(match.group(), match.start(), match.end()) for match in matches]
        for number, start, end in results:
            if (start >= xPos):
                result = (int(number),start,yPos,end-start)
                break
        
        if (result[0] != -1):
            break

        xPos = 0
        yPos += 1

        if (yPos >= len(data)):
            break

    return result

def isAdjacent(data,x,y,l):
    result = False
    if (isSymbol(data,x-1,y) or isSymbol(data,x+l,y)):
        result = True
    else:
        for i in range(x-1,x+l+1):
            if (isSymbol(data,i,y-1) or isSymbol(data,i,y+1)):
                result=True
                break
    return result


input = getInput()

# data = arrayFromGridOfDigits(input)
# p(data)

data = input
p(data)

x=0
y=0

sum=0
while (True):
    result = nextNumber(data,x,y)
    p(result)
    if (result[0] == -1):
        break

    if (isAdjacent(data,result[1],result[2],result[3])):
        p(True)
        sum += result[0]


    x = result[1]+result[3]
    y = result[2]

p(sum)