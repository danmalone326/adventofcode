#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
import sympy

debug=True
def p(obj):
    if type(obj) in [str,int]:
        print(obj)
    else:
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    data = []
    for line in input:
        point = [line]
        point.extend([[int(n) for n in pos.split(', ')] for pos in line.split(' @ ')])

        # add slope (m) and y intercept (b)
        if point[delta][x] == 0:
            m = None
            b = None
        else:
            m = point[delta][y] / point[delta][x]
            b = point[startPoint][y] - m * point[startPoint][x]        
        point.extend([m,b])

        data.append(point)
    return data

def pdHailstone(h, label=None):
    pd("Hailstone {}: {}".format(label,h[orig]))

def findXYIntersection(p1, p2):
    result = None
    if (p1[m] and p2[m]):
        if (p1[m] == p2[m]):
            if (p1[b] == p2[b]):
                x=boundaryLow
                y = p1[m]*x + p1[b]
                result = [x,y]
        else:
            x = (p1[b] - p2[b]) / (p2[m] - p1[m])
            y = (p1[b]*p2[m] - p2[b]*p1[m]) / (p2[m] - p1[m])
            result = [x,y]
    elif (p1[m]):
        x = p2[startPoint][x]
        y = p1[m]*x + p1[b]
        result = [x,y]
    elif (p2[m]):
        x = p1[startPoint][x]
        y = p2[m]*x + p2[b]
        result = [x,y]
    else:
        if p1[x] == p2[x]:
            x = p1[x]
            y = boundaryLow
            result = [x,y]
    return result
    
def countXYIntersections(hailstones):
    count = 0

    for i in range(len(hailstones)):
        for j in range(i+1,len(hailstones)):
            hA = hailstones[i]
            hB = hailstones[j]
            # pdHailstone(hA,'A')
            # pdHailstone(hB,'B')
            pIntersect = findXYIntersection(hA,hB)
            # pd(pIntersect)
            intersect = True
            if not (
                pIntersect and
                boundaryLow <= pIntersect[x] <= boundaryHigh and
                boundaryLow <= pIntersect[y] <= boundaryHigh):
                intersect = False
                # pd('outside')
            else:
                for hTest in [hA,hB]:
                    for coord in [x,y]:
                        coordTest = pIntersect[coord] - hTest[startPoint][coord]
                        deltaTest = hTest[delta][coord]
                        # pd("coord: {} coordTest: {} deltaTest: {}".format(coord,coordTest,deltaTest))
                        if (coordTest == 0 and deltaTest == 0):
                            pass
                        elif (coordTest == 0 or deltaTest == 0):
                            intersect = False
                        elif coordTest/abs(coordTest) != deltaTest/abs(deltaTest):
                            intersect = False
            if intersect:
                # pd("count me!")
                count += 1
    
    return count

def findLine1(H1, H2, H3):
    H1x, H1y, H1z = H1[startPoint]
    H2x, H2y, H2z = H2[startPoint]
    H3x, H3y, H3z = H3[startPoint]
    
    H1dx, H1dy, H1dz = H1[delta]
    H2dx, H2dy, H2dz = H2[delta]
    H3dx, H3dy, H3dz = H3[delta]
    
    t1dx = 0
    t3dx = (((H3y - H1y) * (H2x - H1x)) - ((H3x - H1x) * (H2y - H1y))) / (((H3dx - H2dx) * (H2y - H1y)) - ((H3dy - H2dy) * (H2x - H1x)))
    t2dx = (H2x - H1x) / (((H3x - H1x) / t3dx) + H3dx - H2dx)

    if (t2dx == round(t2dx)) and (t3dx == round(t3dx)):
        pd("close!")
    pd("t1dx: {} t2dx: {} t3dx: {}".format(t1dx,t2dx,t3dx))

def primeFactors(n):
    i = 2
    factors = []
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

def findLine2(hailstones):
    dMax = [0,0,0]
    for h in hailstones:
        d = h[delta]
        # p(d)
        for coord in [x,y,z]:
            dc = abs(d[coord])
            if dc < 2:
                f = [dc]
            else:
                f = primeFactors(dc)
            # p("{}: {}".format(coord,f))
            dMax[coord] = max(dMax[coord],max(f))
        
    p(dMax)

    answer = [None,None,None]
    for h in hailstones:
        for coord in [x,y,z]:
            a = abs(h[delta][coord])
            if dMax[coord] == a:
                answer[coord] = h[startPoint][coord]
    
    p(answer)
    p(sum(answer))

def findLine3(hailstones):
    h = hailstones

    s1 = 0
    s2 = 2
    s3 = 3

    rx, ry, rz, rdx, rdy, rdz = sympy.symbols('rx ry rz rdx rdy rdz')
    h1x, h1y, h1z, h1dx, h1dy, h1dz, t1 = sympy.symbols('h1x h1y h1z h1dx h1dy h1dz t1')
    h2x, h2y, h2z, h2dx, h2dy, h2dz, t2 = sympy.symbols('h2x h2y h2z h2dx h2dy h2dz t2')
    h3x, h3y, h3z, h3dx, h3dy, h3dz, t3 = sympy.symbols('h3x h3y h3z h3dx h3dy h3dz t3')
    
    allSubs = {
        h1x: h[s1][startPoint][x],
        h1y: h[s1][startPoint][y],
        h1z: h[s1][startPoint][z],
        h1dx: h[s1][delta][x],
        h1dy: h[s1][delta][y],
        h1dz: h[s1][delta][z],
        h2x: h[s2][startPoint][x],
        h2y: h[s2][startPoint][y],
        h2z: h[s2][startPoint][z],
        h2dx: h[s2][delta][x],
        h2dy: h[s2][delta][y],
        h2dz: h[s2][delta][z],
        h3x: h[s3][startPoint][x],
        h3y: h[s3][startPoint][y],
        h3z: h[s3][startPoint][z],
        h3dx: h[s3][delta][x],
        h3dy: h[s3][delta][y],
        h3dz: h[s3][delta][z],
    }

    e1x = sympy.Eq(rx + rdx*t1 - h1x + h1dx*t1,0)
    e1x.subs(allSubs)
    e1y = sympy.Eq(ry + rdy*t1 - h1y + h1dy*t1,0)
    e1y.subs(allSubs)
    e1z = sympy.Eq(rz + rdz*t1 - h1z + h1dz*t1,0)
    e1z.subs(allSubs)

    e2x = sympy.Eq(rx + rdx*t2 - h2x + h2dx*t2,0)
    e2x.subs(allSubs)
    e2y = sympy.Eq(ry + rdy*t2 - h2y + h2dy*t2,0)
    e2y.subs(allSubs)
    e2z = sympy.Eq(rz + rdz*t2 - h2z + h2dz*t2,0)
    e2z.subs(allSubs)

    e3x = sympy.Eq(rx + rdx*t3 - h3x + h3dx*t3,0)
    e3x.subs(allSubs)
    e3y = sympy.Eq(ry + rdy*t3 - h3y + h3dy*t3,0)
    e3y.subs(allSubs)
    e3z = sympy.Eq(rz + rdz*t3 - h3z + h3dz*t3,0)
    e3z.subs(allSubs)

    result = sympy.solve((e1x, e1y, e1z, e2x, e2y, e2z, e3x, e3y, e3z)
                         ,(rx, ry, rz, rdx, rdy, rdz, t1, t2, t3))
    
    print(allSubs)
    p(result)


def findLine(hailstones):
    h = hailstones

    s1 = 0
    s2 = 2
    s3 = 3

    rx, ry, rz, rdx, rdy, rdz = sympy.symbols('rx ry rz rdx rdy rdz')
    t1, t2, t3 = sympy.symbols('t1 t2 t3')
    # h1x, h1y, h1z, h1dx, h1dy, h1dz, t1 = sympy.symbols('h1x h1y h1z h1dx h1dy h1dz t1')
    # h2x, h2y, h2z, h2dx, h2dy, h2dz, t2 = sympy.symbols('h2x h2y h2z h2dx h2dy h2dz t2')
    # h3x, h3y, h3z, h3dx, h3dy, h3dz, t3 = sympy.symbols('h3x h3y h3z h3dx h3dy h3dz t3')
    
        
    h1x = h[s1][startPoint][x]
    h1y = h[s1][startPoint][y]
    h1z = h[s1][startPoint][z]
    h1dx = h[s1][delta][x]
    h1dy = h[s1][delta][y]
    h1dz = h[s1][delta][z]
    h2x = h[s2][startPoint][x]
    h2y = h[s2][startPoint][y]
    h2z = h[s2][startPoint][z]
    h2dx = h[s2][delta][x]
    h2dy = h[s2][delta][y]
    h2dz = h[s2][delta][z]
    h3x = h[s3][startPoint][x]
    h3y = h[s3][startPoint][y]
    h3z = h[s3][startPoint][z]
    h3dx = h[s3][delta][x]
    h3dy = h[s3][delta][y]
    h3dz = h[s3][delta][z]

    # allSubs = {
    #     h1x: h[s1][startPoint][x],
    #     h1y: h[s1][startPoint][y],
    #     h1z: h[s1][startPoint][z],
    #     h1dx: h[s1][delta][x],
    #     h1dy: h[s1][delta][y],
    #     h1dz: h[s1][delta][z],
    #     h2x: h[s2][startPoint][x],
    #     h2y: h[s2][startPoint][y],
    #     h2z: h[s2][startPoint][z],
    #     h2dx: h[s2][delta][x],
    #     h2dy: h[s2][delta][y],
    #     h2dz: h[s2][delta][z],
    #     h3x: h[s3][startPoint][x],
    #     h3y: h[s3][startPoint][y],
    #     h3z: h[s3][startPoint][z],
    #     h3dx: h[s3][delta][x],
    #     h3dy: h[s3][delta][y],
    #     h3dz: h[s3][delta][z],
    # }

    # et3 = sympy.Eq((((h3y - h1y) * (h2x - h1x)) - ((h3x - h1x) * (h2y - h1y))) / (((h3dx - h2dx) * (h2y - h1y)) - ((h3dy - h2dy) * (h2x - h1x))) - t3,0)
    # et3.subs(allSubs)

    # erdx = sympy.Eq(((h3dx - h1x) / t3) + h3dx - rdx, 0)
    # erdx.subs(allSubs)
    # erdy = sympy.Eq(((h3dy - h1y) / t3) + h3dy - rdy, 0)
    # erdy.subs(allSubs)
    # erdz = sympy.Eq(((h3dz - h1z) / t3) + h3dz - rdz, 0)
    # erdz.subs(allSubs)

    # erx = sympy.Eq()

    e1x = sympy.Eq(rx + rdx*t1 - h1x + h1dx*t1,0)
    # e1x.subs(allSubs)
    e1y = sympy.Eq(ry + rdy*t1 - h1y + h1dy*t1,0)
    # e1y.subs(allSubs)
    e1z = sympy.Eq(rz + rdz*t1 - h1z + h1dz*t1,0)
    # e1z.subs(allSubs)

    e2x = sympy.Eq(rx + rdx*t2 - h2x + h2dx*t2,0)
    # e2x.subs(allSubs)
    e2y = sympy.Eq(ry + rdy*t2 - h2y + h2dy*t2,0)
    # e2y.subs(allSubs)
    e2z = sympy.Eq(rz + rdz*t2 - h2z + h2dz*t2,0)
    # e2z.subs(allSubs)

    e3x = sympy.Eq(rx + rdx*t3 - h3x + h3dx*t3,0)
    # e3x.subs(allSubs)
    e3y = sympy.Eq(ry + rdy*t3 - h3y + h3dy*t3,0)
    # e3y.subs(allSubs)
    e3z = sympy.Eq(rz + rdz*t3 - h3z + h3dz*t3,0)
    # e3z.subs(allSubs)

    result = sympy.solve((e1x, e1y, e1z, e2x, e2y, e2z, e3x, e3y, e3z))[0]
    
    # print(allSubs)
    print(result)

    answer = result[rx] + result[ry] + result[rz]
    print(answer)


orig = 0
startPoint = 1
delta = 2
m = 3
b = 4

x = 0
y = 1
z = 2

boundaryLow = 200000000000000
boundaryHigh = 400000000000000

# boundaryLow = 7
# boundaryHigh = 27

debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

hailstones = parseInput(sourceInput)
# pd(points)

# count = countXYIntersections(hailstones)
# p(count)
# for i in range(1,len(hailstones)-1):
#     for j in range(i+1,len(hailstones)):
#         p('i: {} j: {}'.format(i,j))
#         findLine(hailstones[0],hailstones[i],hailstones[j])

findLine(hailstones)