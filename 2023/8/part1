#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re

debug=True
def p(obj):
    print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    data = {}
    data["map"] = input[0]

    nodes = {}
    for node in input[2:]:
        nodeName, leftPath, rightPath = re.sub(r"[^\w ]+","",node).split()
        thisNode = {"L": leftPath, "R": rightPath}
        nodes[nodeName] = thisNode

    data["nodes"] = nodes

    return data

def takeNextStep(data,currentNode,step):
    nextNode = data["nodes"][currentNode][data["map"][step%len(data["map"])]]
    return nextNode

debug = True

input = getInput()

data = parseInput(input)
pd(data)

step = 0
maxStep = 100000

currentNode = "AAA"
destinationNode = "ZZZ"
while (currentNode != destinationNode and step <= maxStep):
    currentNode = takeNextStep(data,currentNode,step)
    step += 1

p(currentNode)
p(step)