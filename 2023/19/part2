#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy

debug=True
def p(obj):
    if type(obj) in [str,int]:
        print(obj)
    else:
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    data = {
        "workflows": {},
        "parts": []
    }
    for line in input:
        if len(line) == 0:
            pass
        elif line[0] == '{':
            thisPart = {}
            for rating in line[1:-1].split(','):
                attr,val = rating.split('=')
                thisPart[attr] = int(val)
            data["parts"].append(thisPart)
        elif line[0].isalpha():
            thisWorkflow = []
            id,rest = line.split('{',1)
            for rule in rest.split('}',1)[0].split(','):
                if ':' in rule:
                    condition,nextWorkflow = rule.split(':')
                    thisWorkflow.append([condition,nextWorkflow])
                else:
                    thisWorkflow.append(["True",rule])
            data["workflows"][id] = thisWorkflow
    return data

def appendRule(rule1,rule2):
    newRule = rule1
    if len(rule1) > 0 and len(rule2) > 0 and not rule1[-1] == ',' and not rule2[0] == ',':
        newRule += ','
    newRule += rule2
    return newRule

translateTable = {
    ord("<"): ord(">"),
    ord(">"): ord("<")
}
def followPath(workflowID,cumulativeRules=""):
    workflow = workflows[workflowID]
    oppositeRulesSoFar = ""
    for rule in workflow:
        thisRules = appendRule(cumulativeRules,oppositeRulesSoFar)
        condition,result = rule
        if condition != 'True':
            thisRules = appendRule(thisRules,condition)
            oppositeRulesSoFar = appendRule(oppositeRulesSoFar,'!'+condition)
        if result == 'A':
            accepted.append(thisRules)
        elif result == 'R':
            rejected.append(thisRules)
        else:
            followPath(result,thisRules)
        
def computePossibilities(ruleSet):
    low = {
        'x': 1,
        'm': 1,
        'a': 1,
        's': 1
    }
    high = {
        'x': 4000,
        'm': 4000,
        'a': 4000,
        's': 4000
    }
    for rule in ruleSet.split(','):
        if rule[0] == '!':
            key = rule[1]
            operator = rule[2]
            value = int(rule[3:])
            if operator == '<': # actual >=, set min
                low[key] = max(low[key],value)
            elif operator == '>': # actual <=, set max
                high[key] = min(high[key],value)
        else:
            key = rule[0]
            operator = rule[1]
            value = int(rule[2:])
            if operator == '<': 
                high[key] = min(high[key],value-1)
            elif operator == '>': 
                low[key] = max(low[key],value+1)

    result = 1
    for key in low.keys():
        thisCount = 0
        if low[key] <= high[key]:
            thisCount = high[key] - low[key] + 1
        result *= thisCount

    return result




debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = parseInput(sourceInput)
# pd(data)

parts = data["parts"]
workflows = data["workflows"]

# pd(parts[0])

accepted = []
rejected = []

followPath("in")

p(len(accepted))
p(accepted)

total = 0
for ruleSet in accepted:
    thisCount = computePossibilities(ruleSet)
    total += thisCount

p(total)