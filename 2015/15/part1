#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime

debug=True

def p(obj,timePrefix = False):
    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    ingredients = []
    for line in input:
        thisP = {}
        itemName = line.split(':')[0]
        for property in line.split(': ')[1].split(', '):
            p,i = property.split()
            thisP[p] = int(i)
        ingredients.append(thisP)

    return ingredients

maxSum = 100
def incCombo(iList,index=None):
    global maxSum

    lastIndex = len(iList)-1

    if index is None:
        i = lastIndex
    else:
        i = index

    result = True
    if (i == 0):
        iList[i] += 1
        if iList[i] > maxSum:
            result = False
    elif (i == lastIndex):
        result = incCombo(iList,len(iList)-2)
        iList[-1] = maxSum - sum(iList[0:-1])
    else:
        iList[i] += 1
        remain = maxSum - sum(iList[0:i])
        if iList[i] > remain:
            result = incCombo(iList,i-1)
            iList[i] = 1
        
    return result


debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = parseInput(sourceInput)
# pd(data)

# initialize first combo
ingrAmount = [1] * len(data)
ingrAmount[-1] = maxSum - sum(ingrAmount[0:-1])

count = 0
maxScore = 0
while True:
    # p(str(a))
    count += 1

    score = 1
    for prop in data[0].keys():
        thisProp = 0
        calories = 0
        for ingrIndex in range(len(data)):
            thisProp += ingrAmount[ingrIndex] * data[ingrIndex][prop]
        if thisProp <= 0:
            score = 0
            break
        elif prop == 'calories':
            calories = thisProp
        else:
            score *= thisProp

    if score > maxScore:
        maxScore = score
        p(str(ingrAmount))
        p(score)

    if not incCombo(ingrAmount):
        break

p(count)