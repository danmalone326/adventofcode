#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime

debug=True

def p(obj,timePrefix = False):
    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    data = []
    for line in input:
        splitLine = line.split()
        name = splitLine[0]
        speed = int(splitLine[3])
        travelDuration = int(splitLine[6])
        restDuration = int(splitLine[13])
        data.append([name,speed,travelDuration,restDuration])
    return data

debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = parseInput(sourceInput)
pd(data)

raceDuration = 2503
distances = []
for r in data:
    thisDistance = 0
    name, speed, travelDuration, restDuration = r
    cycleDuration = travelDuration + restDuration
    fullCycles = math.floor(raceDuration/cycleDuration)
    remainingDuration = raceDuration % cycleDuration
    if remainingDuration > travelDuration:
        remainingDuration = travelDuration
    
    thisDistance += (fullCycles * travelDuration + remainingDuration) * speed

    distances.append(thisDistance)

p(max(distances))