#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools
import numpy

debug=True

def p(obj,timePrefix = False):
    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    data = [int(x) for x in input]
    return data

def findSets(data,groups):

    sData = sorted(data)
    num = sum(data) // groups
    p('groups: {}'.format(groups))
    p('weight per group: {}'.format(num))

    for i in range(1,len(sData)):
        # p(sData[:i])
        if sum(sData[:i]) > num:
            maxSize = i
            break
    p('maxSize: {}'.format(maxSize),timePrefix=True)

    for i in range(1,len(sData)):
        # p(sData[-i:])
        # p(sum(sData[-i:]))
        if sum(sData[-i:]) > num:
            minSize = i
            break
    p('minSize: {}'.format(minSize),timePrefix=True)

    iter = 0
    sets = []
    # for i in range(minSize,maxSize+1):
    #     for c in itertools.combinations(sData,i):
    #         if sum(c) == num:
    #             sets.append(c)
    for i in range(minSize,minSize+2):
        for c in itertools.combinations(sData,i):
            iter += 1
            if iter % 10000 == 0:
                p('iter: {}'.format(iter),timePrefix=True)
            if sum(c) == num:
                sets.append(c)
    p('sets: {}'.format(len(sets)),timePrefix=True)

    sSets = sorted(sets,key=lambda s: numpy.prod(s))

    # combos = []
    # for c in itertools.combinations(sets,3):
    #     thisSorted = sorted(c[0]+c[1]+c[2])
    #     # p(thisSorted)
    #     if thisSorted == sData:
    #         combos.append(sorted(c,key=lambda x: (len(x), numpy.prod(x))))
    #         # p('{} {} {}'.format(str(c[0]), str(c[1]), str(c[2])))
    
    # p('combos: {}'.format(len(combos)))
    # p(combos)

    # sCombos = sorted(combos,key=lambda c: (len(c[0]), numpy.prod(c[0])))
    # p('best: {}'.format(str(sCombos[0])))
    p('best QE: {}'.format(numpy.prod(sSets[0])))

    return sets


debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = parseInput(sourceInput)
pd(data)

s = findSets(data,4)
# p(s)
