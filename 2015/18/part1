#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime

debug=True

def p(obj,timePrefix = False):
    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue


def parseInput(input):
    data = []
    lenX = len(input[0])
    lenY = len(input)
    for line in input:
        i = int(line.replace('.','0').replace('#','1'),2)
        data.append(i)
    return lenX, lenY, data

def isOn(x,y):
    global gridLenX, gridLenY, grid

    if ((0 <= y < gridLenY) and x >= 0):
        result = (grid[y] & 2**x) > 0
    else:
        result = False
    return result

def bitCountWithMask(i,mask):
    # p((bin(i),bin(mask),bin(i & mask)))
    return (i & mask).bit_count()

def countAround(x,y):
    global gridLenX, gridLenY, grid

    count = 0

    if x == 0:
        mask = 3
    else:
        mask = 7 << (x-1)

    # p(bin(mask))
    
    for i in range(max(y-1,0), y+2):
        try:
            count += bitCountWithMask(grid[i],mask)
        except IndexError:
            pass

    return count

def doPass():
    global gridLenX, gridLenY, grid

    newGrid = []
    for y in range(gridLenY):
        thisRow = 0
        for x in range(gridLenX):
            bc = countAround(x,y)
            if (isOn(x,y) and bc in [3,4]) or ((not isOn(x,y)) and bc == 3):
                thisRow += 2 ** x
        newGrid.append(thisRow)

    grid = newGrid

def doStuck():
    global gridLenX, gridLenY, grid
    stuckMask = 1 + (2 ** (gridLenX-1))
    grid[0] |= stuckMask
    grid[gridLenY-1] |= stuckMask

def pGrid():
    global gridLenX, gridLenY, grid

    fStr = '{0:0' + str(gridLenX) + 'b}'
    for y in range(gridLenY):
        p(fStr.format(grid[y]).replace('0','.').replace('1','#'))

debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

gridLenX, gridLenY, grid = parseInput(sourceInput)
pd(grid)

# p('{0:06b}'.format(grid[0]))

iterations = 100
# pGrid()
doStuck()
# p('')
# pGrid()
for i in range(iterations):
    doPass()
    doStuck()
    # p('')
    # pGrid()

count = 0
for x in grid:
    count += x.bit_count()
p(count)