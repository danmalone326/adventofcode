#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools

debug=True

def p(obj,timePrefix = False):
    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    data = arrayOfIntFromCSV(input[0])
    return data

debug = True

# sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

# data = parseInput(sourceInput)
# pd(data)

# Enter the code at row 2981, column 3075.
# start with 20151125
# * 252533
# % 33554393

# top row = (x**2 + x) /2 
# other row = z=(x+y-2) then (z**2 + z)/2 + x

for x in range(1,7):
    for y in range(1,7):
        z=x+y-2
        s = int((z**2 + z)/2 + x)
        print(' {0:3d}'.format(s),end='')
    p('')


x=3075
y=2981

# x=6
# y=6

z=x+y-2
s = int((z**2 + z)/2 + x)
print(' {0:3d}'.format(s))

iter = 1
soFar = []
code = 20151125
soFar.append(code)
while True:
    iter += 1
    if iter % 100000 == 0:
        p(iter,timePrefix=True)
    code = (code * 252533) % 33554393
    # p(code)
    if iter == s:
        p('code: {}'.format(code))
        break
    # if code in soFar:
    #     previous = soFar.index(code)
    #     current  = iter
    #     p(previous)
    #     p(current)
    #     break
    # else:
    #     soFar.append(code)


