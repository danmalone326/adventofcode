#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy

debug=True
def p(obj):
    if type(obj) in [str,int]:
        print(obj)
    else:
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

actionKey = 'action'
lowPos = 'low'
highPos = 'high'
xCoord = 0
yCoord = 1

def getPosKey(x,y):
    return "{}-{}".format(x,y)

def addBri(grid,x,y,i):
    posKey = getPosKey(x,y)
    keyInit(grid,posKey,0)
    grid[posKey] += i
    if grid[posKey] < 0:
        grid[posKey] = 0

def parseInput(input):
    data = []
    for line in input:
        thisRange = {}
        splitLine = line.split()
        if splitLine[0] == 'turn':
            splitLine.pop(0)
        
        action = splitLine[0]
        a = [int(k) for k in splitLine[1].split(',')]
        b = [int(k) for k in splitLine[3].split(',')]
        low = [min(a[xCoord],b[xCoord]),min(a[yCoord],b[yCoord])]
        high = [max(a[xCoord],b[xCoord]),max(a[yCoord],b[yCoord])]

        thisRange[actionKey] = action
        thisRange[lowPos] = low
        thisRange[highPos] = high

        data.append(thisRange)

    return data

debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = parseInput(sourceInput)

grid = {}
# pd(data)

allOnes = (2 ** 1000) - 1

for i in range(len(data)):
    thisRange = data[i]
    action = thisRange[actionKey]
    low = thisRange[lowPos]
    high = thisRange[highPos]

    if action == 'on':
        bri = 1
    elif action == 'off':
        bri = -1
    elif action == 'toggle':
        bri = 2

    for y in range(low[yCoord],high[yCoord]+1):
        for x in range(low[xCoord],high[xCoord]+1):
            addBri(grid,x,y,bri)
    
count = 0
for key in grid:
    count += grid[key]

p(count)

# x=2**5 - 1 << 4
# y=2**3 - 1 << 5
# p(format(x,'020b'))
# p(format(y,'020b'))
# p(format(x^y,'020b'))
# p((x^y).bit_count())
# p(1)