#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import sympy

debug=True

def p(obj,timePrefix = False):
    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    data = arrayOfIntFromCSV(input[0])
    return data

def factors(x):
    if x==1: 
        result = [1]
    else:
        result = [1,x]
    for i in range(2,math.ceil(x/2)+2):
        if x % i == 0:
            result.append(i)
    return result

def packagesAtHouse1(h):
    primeFactors = sympy.factorint(h)
    remaining = h

    totalCount = 1
    for factorKey in primeFactors:
        factor = int(factorKey)
        count = 0
        for power in range(0,primeFactors[factorKey]+1):
            count += (factor ** power)
            # remaining //= factor
        totalCount *= count

    totalCount *= 10
    return totalCount

def packagesAtHouse(h):
    divisors = sympy.divisors(h)
    
    count = 0
    for divisor in divisors:
        if divisor*50 >= h:
            count += divisor

    count *= 11
    return count

debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = int(sourceInput[0])
# pd(data)
# data = int(data/10)

# p(factors(data))

# p(sympy.factorint(data))

house = 500000
iteration = 0
count = 0
while iteration < 1000000 and count < data:
    iteration += 1
    house += 1
    count = packagesAtHouse(house)
    if house % 1000 == 0:
        p('{}: {}'.format(house,count),timePrefix=True)

# x = 0
# house = 1
# remaining = 10

# while remaining > 0:
#     # x += 1
#     house += 1
#     remaining -= 1
#     p('{}: {}'.format(house,packagesAtHouse(house)))


# p(factors(house))

p(house)
p(count)
# p(sympy.divisors(house))
# p(1)