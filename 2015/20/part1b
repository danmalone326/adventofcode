#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import sympy

debug=True

def p(obj,timePrefix = False):
    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    data = arrayOfIntFromCSV(input[0])
    return data

def factors(x):
    if x==1: 
        result = [1]
    else:
        result = [1,x]
    for i in range(2,math.ceil(x/2)+2):
        if x % i == 0:
            result.append(i)
    return result

debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = int(sourceInput[0])
pd(data)
data = int(data)

# p(factors(data))

primes = [ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47 ]

def solve(goal, prime_index = len(primes) - 1):
    if prime_index < 0:
        return goal

    p = primes[prime_index]

    p_power = 1 # power of p
    p_sum = 1   # 1 + p + p^2 + ... + p_power

    # try skipping this prime
    best = solve(goal, prime_index - 1)

    while p_sum < goal:
        p_power = p_power * p
        p_sum = p_sum + p_power

        # subproblem: ceil(goal/p_sum) using only primes less than p
        subgoal = (goal + p_sum - 1) // p_sum
        best = min(best, p_power * solve(subgoal, prime_index - 1))

    return best

part1 = solve(data // 10)
print(part1)

# p(1)