#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime

debug=True

def p(obj,timePrefix = False):
    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

insKey = 'ins'
regKey = 'reg'
offKey = 'off'

def parseInput(input):
    data = []
    for line in input:
        instruction, rest = line.split(' ',1)
        thisLine = {
            insKey: instruction
        }
        if instruction in ['hlf','tpl','inc']:
            thisLine[regKey] = rest
        elif instruction == 'jmp':
            thisLine[offKey] = int(rest)
        else:
            thisLine[regKey], tempOffset = rest.split(', ')
            thisLine[offKey] = int(tempOffset)

        data.append(thisLine)

    return data

def processInstruction():
    global code, reg, insPtr

    i = code[insPtr]

    ins = i[insKey]

    if ins == 'hlf':
        reg[i[regKey]] //= 2
        insPtr += 1
    elif ins == 'tpl':
        reg[i[regKey]] *= 3
        insPtr += 1
    elif ins == 'inc':
        reg[i[regKey]] += 1
        insPtr += 1
    elif ins == 'jmp':
        insPtr += i[offKey]
    elif ins == 'jie':
        if reg[i[regKey]] % 2 == 0:
            insPtr += i[offKey]
        else:
            insPtr += 1
    elif ins == 'jio':
        if reg[i[regKey]] == 1:
            insPtr += i[offKey]
        else:
            insPtr += 1

    


debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

code = parseInput(sourceInput)
pd(code)

insPtr = 0
reg = {
    'a': 1,
    'b': 0
}

try:
    while True:
        # p([reg,insPtr,code[insPtr]])
        processInstruction()
        # wait()

except:
    pass

p(reg)