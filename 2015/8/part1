#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy

debug=True
def p(obj):
    if type(obj) in [str,int]:
        print(obj)
    else:
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    data = input
    return data

def decodeString(str):
    result = str[1:-1]

    # replace hex
    result = re.sub(r'\\x[0-9a-f]{2}', 'H', result)

    # replace quotes
    result = re.sub(r'\\"', '"', result)

    # replace backslash
    result = re.sub(r'\\\\', '\\\\', result)

    return result

def encodeString(str):
    result = str

    # replace backslash
    result = re.sub(r'\\', '\\\\\\\\', result)

    # replace quotes
    result = re.sub(r'"', '\\"', result)

    result = '"' + result + '"'

    return result


debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = parseInput(sourceInput)
pd(data)

total1 = 0
total2 = 0
for line in data:
    decodedLine = decodeString(line)
    encodedLine = encodeString(line)
    p('{}: {} | {}'.format(line,decodedLine,encodedLine))
    total1 += len(line) - len(decodedLine)
    total2 += len(encodedLine) - len(line)

p(total1)
p(total2)