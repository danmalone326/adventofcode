#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime

debug=True

def p(obj,timePrefix = False):
    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    bl = findBlankLine(input)

    reps = list(line.split(' => ') for line in input[:bl])
    mols = input[bl+1:]
    return reps,mols

def findRevRep(s):
    global replacements

    for r in replacements:
        if r[1] == s:
            return r
        
def findMost(s):
    global replacements

    max = 0
    maxR = None
    for r in replacements:
        c = len(list([x.start() for x in re.finditer(r[1], s)]))
        if c > max:
            max = c
            maxR = r
    return maxR

def showMost(s):
    data = {}
    for r in replacements:
        c = len(list([x.start() for x in re.finditer(r[1], s)]))
        if c > 0:
            data[r[1]] = c

    sData = {k: v for k, v in sorted(data.items(), key=lambda item: item[1])}
    p(sData)
        # print('{}: {}'.format(r[1],))

debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

replacements,molecules = parseInput(sourceInput)

# p(replacements)
# p(molecules)

doThese = ['CaSi',"SiTh","CaP","CaF","PB","BP","PTi","PRnFAr"]

count = 0

m = molecules[0]
# for t in doThese:
#     r = findRevRep(t)
lastM = ""
while m != lastM:
    lastM = m

    for r in replacements:
    # r = findRevRep(t)
        rLen = len(r[1])
        if m.find(r[1]) >= 0:
            i = m.find(r[1])
            m = m[:i] + r[0] + m[i+rLen:]
            count += 1
            p(count)
            p(m)

    p(count)

# wait()

# showMost(m)