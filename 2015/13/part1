#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools

debug=True

def p(obj,timePrefix = False):
    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def nKey(p1,p2):
    return '{}-{}'.format(min(p1,p2),max(p1,p2))

def parseInput(input):
    data = {
        "d1": [],
        "d2": {},
        "pList": []
    }

    for line in input:
        splitLine = line.split()
        p1 = splitLine[0]
        units = int(splitLine[3])
        if splitLine[2] == 'lose':
            units = -units
        p2 = splitLine[-1][0:-1]

        data['d1'].append([p1,p2,units])
        data['pList'].extend([p1,p2])

    data['pList'] = list(set(data['pList']))

    for d in data['d1']:
        key = nKey(d[0],d[1])
        keyInit(data['d2'],key,0)
        data['d2'][key] += d[2]


    return data

debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = parseInput(sourceInput)
pd(data)

hTotals = []
for thisOrder in itertools.permutations(data['pList']):
    thisSum = 0
    for i in range(len(thisOrder)-1):
        thisSum += data['d2'][nKey(thisOrder[i],thisOrder[i+1])]
    # thisSum += data['d2'][nKey(thisOrder[0],thisOrder[-1])]
    hTotals.append(thisSum)
    # p(str(thisOrder))
    # p(thisSum)

p(max(hTotals))