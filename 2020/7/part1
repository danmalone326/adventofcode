#!/usr/bin/python3
import sys
import fileinput
import json
import re

def p(obj):
    print(json.dumps(obj, indent=2))

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def upsert(dict,key,value):
    if (key in dict):
        dict[key] += value
    else:
        dict[key] = value

def getBagContents(bag):
    result = {}
    for insideBag in bagRules[bag]:
        count = bagRules[bag][insideBag]
        ruleResult = getBagContents(insideBag)
        for ruleResultBag in ruleResult:
            value = ruleResult[ruleResultBag] * count
            upsert(result,ruleResultBag,value)
        upsert(result,insideBag,count)
    return result


input = getInput()

# data = arrayFromGridOfDigits(input)
# p(data)

bagRules = {}
for row in input:
    thisType,thisRule = row.split(" contain ")
    thisType = ' '.join(arrayOfWordsFromString(thisType)[0:2])
    # p(thisType)
    bagRules[thisType] = {}
    thisRuleList = arrayOfWordsFromString(thisRule)
    if (thisRuleList[0].isnumeric()):
        while (len(thisRuleList) > 3):
            count = int(thisRuleList[0])
            ruleType = ' '.join(thisRuleList[1:3])
            bagRules[thisType][ruleType] = count
            thisRuleList = thisRuleList[4:]

# p(bagRules)

bagContents = {}
for bag in bagRules:
    thisBagContents = getBagContents(bag)
    bagContents[bag] = thisBagContents

# p(bagContents)
    
count = 0
for bag in bagContents:
    if ("shiny gold" in bagContents[bag]):
        # p(bag)
        count += 1
p(count)

count = 0
for c in bagContents["shiny gold"]:
    count += bagContents["shiny gold"][c]
    
p(count)