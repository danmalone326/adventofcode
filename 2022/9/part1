#!/usr/bin/python3
import sys
import fileinput
import json

def p(obj):
    print(json.dumps(obj, indent=2))

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def genGrid(gridSize):
    grid = []
    for y in range(gridSize['y']):
        grid.append(['.'] * gridSize['x'])
    # grid = [['.'] * gridSize['x']] * gridSize['y']
    return grid

def printGrid(grid):
    for y in range(len(grid)):
        print("".join(grid[y]))

def markVisited(coordinate,grid):
    # p(("marking",coordinate))
    grid[coordinate['y']][coordinate['x']] = '#'
    # printGrid(grid)

def countVisited(grid):
    count = 0
    for y in range(len(grid)):
        for x in range(len(grid[0])):
            if (grid[y][x] == '#'):
                count += 1
    return count

def newCoordinate(x,y):
    p = {"x":x, "y":y}
    return p

maxDistance = 1
def isTouching(a,b):
    # p((a,b))
    result = (abs(a['x']-b['x']) <= maxDistance) and (abs(a['y']-b['y']) <= maxDistance)
    return result

def newTail(head,tail):
    xDistance = head['x'] - tail['x']
    yDistance = head['y'] - tail['y']
    # if (abs(xDistance) > maxDistance):
    #     result = newCoordinate(tail['x'] + int(xDistance/abs(xDistance)),head['y'])
    # if (abs(yDistance) > maxDistance):
    #     result = newCoordinate(head['x'],tail['y'] + int(yDistance/abs(yDistance)))
    if (yDistance == 0):
        result = newCoordinate(tail['x'] + int(xDistance/abs(xDistance)),head['y'])
    elif (xDistance == 0):
        result = newCoordinate(head['x'],tail['y'] + int(yDistance/abs(yDistance)))
    else:
        result = newCoordinate(tail['x'] + int(xDistance/abs(xDistance)),tail['y'] + int(yDistance/abs(yDistance)))
    return result

input = getInput()

maxX = 0
minX = 0
maxY = 0
minY = 0
curX = 0
curY = 0

for line in input:
    direction,stepsStr = line.split(" ")
    steps = int(stepsStr)
    if (direction == 'L'):
        curX -= steps
    elif (direction == 'R'):
        curX += steps
    elif (direction == 'U'):
        curY += steps
    elif (direction == 'D'):
        curY -= steps

    if (curX > maxX):
        maxX = curX
    if (curX < minX):
        minX = curX
    if (curY > maxY):
        maxY = curY
    if (curY < minY):
        minY = curY

# p(((minX,minY),(maxX,maxY)))

size = newCoordinate(maxX + 1 - minX, maxY + 1 - minY)

numKnots = 10
knots = []

for i in range(numKnots):
    knots.append(newCoordinate(0 - minX, 0 - minY))
# head = newCoordinate(0 - minX, 0 - minY)
# tail = newCoordinate(0 - minX, 0 - minY)
# p(isTouching(head,tail))


grid = genGrid(size)

# printGrid(grid)

# now move around
for line in input:
    direction,stepsStr = line.split(" ")
    steps = int(stepsStr)

    for i in range(steps):
        if (direction == "R"):
            knots[0]['x'] += 1
        if (direction == "L"): 
            knots[0]['x'] -= 1
        if (direction == "U"):
            knots[0]['y'] += 1
        if (direction == "D"):
            knots[0]['y'] -= 1
        
        for j in range(numKnots-1):
            if (not isTouching(knots[j],knots[j+1])):
                knots[j+1] = newTail(knots[j],knots[j+1])

        markVisited(knots[-1],grid)

        # printGrid(grid)

printGrid(grid)
p(countVisited(grid))