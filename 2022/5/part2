#!/usr/bin/python3
import sys
import fileinput
import json

def p(obj):
    print(json.dumps(obj, indent=2))

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = value


    


input = getInput()

# data = arrayFromGridOfDigits(input)
# p(data)

splitLine = findBlankLine(input)

# append (push)
# pop (pop)

stacks = []

for i in range(splitLine-2,-1,-1):
    thisLine = input[i]
    p(thisLine)

    s = 0
    while (True):
        pos = 1 + s*4
        if (pos > len(thisLine)):
            break
        while (len(stacks) <= s):
            stacks.append([])
        c = thisLine[pos]
        if (c != " "):
            stacks[s].append(c)
        s+=1

p(stacks)

for line in input[splitLine+1:]:
    parts = line.split(" ")
    moveCount = int(parts[1])
    fromStack = int(parts[3]) - 1
    toStack = int(parts[5]) - 1

    
    stacks[toStack].extend(stacks[fromStack][-moveCount:])
    stacks[fromStack] = stacks[fromStack][:-moveCount]

    p(stacks)

tops = ""
for s in stacks:
    tops += s[-1]

p(tops)