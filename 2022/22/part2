#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re

def p(obj):
    print(json.dumps(obj, indent=2))

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    result = {}

    map = [" "]
    for line in input[:findBlankLine(input)]:
        map.append(" "+line)

    result["map"] = map

    path = []
    remainingPath = input[findBlankLine(input)+1]
    while (remainingPath):
        if (remainingPath[0] in ['R','L']):
            path.append(remainingPath[0])
            remainingPath = remainingPath[1:]
        else:
            m = re.match(r'^\d*',remainingPath)
            g = m.group(0)
            path.append(g)
            remainingPath = remainingPath[len(g):]

    result["path"] = path
    return result

fpr = {}
def firstPositionInRow(y,data):
    result = None
    if (y in fpr):
        result = fpr[y]
    else:
        result = data["map"][y].rfind(' ')+1
        fpr[y] = result
    return result

lpr = {}
def lastPositionInRow(y,data):
    result = None
    if (y in lpr):
        result = lpr[y]
    else:
        result = len(data["map"][y])-1
        lpr[y] = result
    return result

fpc = {}
def firstPositionInColumn(x,data):
    result = None
    if (x in fpc):
        return fpc[x]
    else:
        map = data["map"]
        for y in range(len(map)):
            if (x >= len(map[y])):
                continue
            elif (map[y][x] != ' '):
                result = y
                break
        fpc[x] = result
    return result

lpc = {}
def lastPositionInColumn(x,data):
    result = None
    if (x in lpc):
        return lpc[x]
    else:
        map = data["map"]
        for y in reversed(range(len(map))):
            if (x >= len(map[y])):
                continue
            elif (map[y][x] != ' '):
                result = y
                break
        lpc[x] = result
    return result

def setStartingPosition(data):
    result = [
        firstPositionInRow(1,data),
        1,
        ">"
    ]
    return result

def computePassword(position):
    result = 1000 * position[1] + 4 * position[0]
    d = position[2]
    if (d == '>'):
        result += 0
    elif (d == 'v'):
        result += 1
    elif (d == '<'):
        result += 2
    else:
        result += 3

    return result

# rotate table
rotateTable = {
    ">R": "v",
    "vR": "<",
    "<R": "^",
    "^R": ">",
    ">L": "^",
    "vL": ">",
    "<L": "v",
    "^L": "<"
}
def newDirection(currentDirection,turn):
    result = rotateTable[currentDirection+turn]
    return result

# cubeSize = 4
# wrapHelperList = {
#     "^0": {
#         "xEval": "13-x",
#         "yEval": "1",
#         "d": "v"
#     },
#     "^1": {
#         "xEval": "9",
#         "yEval": "x-4",
#         "d": ">"
#     },
#     "^2": {
#         "xEval": "13-x",
#         "yEval": "5",
#         "d": "v"
#     },
#     "^3": {
#         "xEval": "8",
#         "yEval": "21-y",
#         "d": "<"
#     },
#     "v0": {
#         "xEval": "13-x",
#         "yEval": "12",
#         "d": "^"
#     },
#     "v1": {
#         "xEval": "9",
#         "yEval": "17-x",
#         "d": ">"
#     },
#     "v2": {
#         "xEval": "13-x",
#         "yEval": "8",
#         "d": "^"
#     },
#     "v3": {
#         "xEval": "1",
#         "yEval": "21-y",
#         "d": ">"
#     },
#     "<0": {
#         "xEval": "y+4",
#         "yEval": "5",
#         "d": "v"
#     },
#     "<1": {
#         "xEval": "21-x",
#         "yEval": "12",
#         "d": "^"
#     },
#     "<2": {
#         "xEval": "17-y",
#         "yEval": "8",
#         "d": "^"
#     },
#     ">0": {
#         "xEval": "16",
#         "yEval": "13-y",
#         "d": "<"
#     },
#     ">1": {
#         "xEval": "21-y",
#         "yEval": "9",
#         "d": "v"
#     },
#     ">2": {
#         "xEval": "12",
#         "yEval": "13-y",
#         "d": "<"
#     }
# }

cubeSize = 50
wrapHelperList = {
    "^0": {
        "xEval": "51",
        "yEval": "x+50",
        "d": ">"
    },
    "^1": {
        "xEval": "1",
        "yEval": "x+100",
        "d": ">"
    },
    "^2": {
        "xEval": "x-100",
        "yEval": "200",
        "d": "^"
    },
    "v0": {
        "xEval": "x+100",
        "yEval": "1",
        "d": "v"
    },
    "v1": {
        "xEval": "50",
        "yEval": "x+100",
        "d": "<"
    },
    "v2": {
        "xEval": "100",
        "yEval": "x-50",
        "d": "<"
    },
    "<0": {
        "xEval": "1",
        "yEval": "151-y",
        "d": ">"
    },
    "<1": {
        "xEval": "y-50",
        "yEval": "101",
        "d": "v"
    },
    "<2": {
        "xEval": "51",
        "yEval": "151-y",
        "d": ">"
    },
    "<3": {
        "xEval": "y-100",
        "yEval": "1",
        "d": "v"
    },
    ">0": {
        "xEval": "100",
        "yEval": "151-y",
        "d": "<"
    },
    ">1": {
        "xEval": "y+50",
        "yEval": "50",
        "d": "^"
    },
    ">2": {
        "xEval": "150",
        "yEval": "151-y",
        "d": "<"
    },
    ">3": {
        "xEval": "y-100",
        "yEval": "150",
        "d": "^"
    }
}

def computeWrapPosition(currentPosition):

    x = currentPosition[0]
    y = currentPosition[1]
    d = currentPosition[2]

    if (d in ['^','v']):
        section = (x-1)//cubeSize
    else:
        section = (y-1)//cubeSize
    
    wrapHelper = wrapHelperList[d + str(section)]

    newPosition = [
        int(eval(wrapHelper["xEval"])),
        int(eval(wrapHelper["yEval"])),
        wrapHelper["d"],
    ]

    return newPosition


def followPath(startPosition,step,data):
    currentPosition = startPosition.copy()

    if (step in ['R','L']):
        currentPosition[2] = newDirection(currentPosition[2],step)

    else:
        map = data["map"]

        for i in range(int(step)):
            # compute next step
            newPos = currentPosition.copy()  # np = new position
            if (newPos[2] == ">"):
                newPos[0] += 1
                if ((newPos[0] >= len(map[newPos[1]])) or (map[newPos[1]][newPos[0]] == ' ')):
                    newPos = computeWrapPosition(currentPosition)
            elif (newPos[2] == '<'):
                newPos[0] -= 1
                if ((newPos[0] < 1) or (map[newPos[1]][newPos[0]] == ' ')):
                    newPos = computeWrapPosition(currentPosition)
            elif (newPos[2] == 'v'):
                newPos[1] += 1
                if ((newPos[1] >= len(map)) or (newPos[0] >= len(map[newPos[1]])) or (map[newPos[1]][newPos[0]] == ' ')):
                    newPos = computeWrapPosition(currentPosition)
            else:
                newPos[1] -= 1
                if ((newPos[1] < 1) or (newPos[0] >= len(map[newPos[1]])) or (map[newPos[1]][newPos[0]] == ' ')):
                    newPos = computeWrapPosition(currentPosition)
            p(["new",newPos])
            if (map[newPos[1]][newPos[0]] != '.'):
                p("stop")
                break
            else:
                currentPosition = newPos
                p(["curr",currentPosition])

    return currentPosition


input = getInput()

# data = arrayFromGridOfDigits(input)
# p(data)

data = parseInput(input)

p(data)

currentPosition = setStartingPosition(data)
p(currentPosition)

for step in data["path"]:
    p(step)
    currentPosition = followPath(currentPosition,step,data)
    p(currentPosition)



password = computePassword(currentPosition)
p(password)