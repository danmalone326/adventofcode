#!/usr/bin/python3
import sys
import fileinput
import json
import re
import math

def p(obj):
    print(json.dumps(obj, indent=2))

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def readMonkeyData(input):
    monkeys = [None] * 10
    currentMonkey = None

    for line in input:
        # p(line)
        m1 = re.match(r'^[^\w]*([^:]*): ?(.*)$',line)
        if (m1):
            attr = m1.group(1)
            value = m1.group(2)
            # p((attr,value))

            if (attr.startswith("Monkey")):
                monkeyNum = int(attr.split(" ")[1])
                currentMonkey = monkeyNum
                monkeys[currentMonkey] = {"inspections": 0}                

            if (attr == "Starting items"):
                monkeys[monkeyNum]["items"] = []
                for item in re.split(r', ',value):
                    monkeys[monkeyNum]["items"].append(int(item))

            if (attr == "Operation"):
                monkeys[currentMonkey]["operation"] = re.split(r' = ',value)[-1]
                # monkeys[currentMonkey]["function"] = eval('lambda old: ' + monkeys[currentMonkey]["operation"])

            if (attr == "Test"):
                monkeys[currentMonkey]["test"] = int(value.split(' ')[-1])

            if (attr == "If true"):
                monkeys[currentMonkey]["trueNext"] = int(value.split(' ')[-1])

            if (attr == "If false"):
                monkeys[currentMonkey]["falseNext"] = int(value.split(' ')[-1])

    return monkeys

def throwToMonkey(item,monkeyNum,monkeys):
    monkeys[monkeyNum]["items"].append(item)

def computeNewWorry(old,operation):
    # p(old)
    result = int(eval(operation))
    return result

def doOneMonkey(monkeyNum,monkeys):
    monkey = monkeys[monkeyNum]
    for item in monkey["items"]:
        monkey["inspections"] += 1
        newWorry = computeNewWorry(item,monkey["operation"])
        # newWorry = monkey["function"](item)
        # p(newWorry)
        if (newWorry%monkey["test"] == 0):
            throwToMonkey(newWorry,monkey["trueNext"],monkeys)
        else:
            throwToMonkey(newWorry,monkey["falseNext"],monkeys)
    monkey["items"] = []

def doAllMonkeys(monkeys):
    for monkeyNum in range(len(monkeys)):
        # p(monkeyNum)
        if (monkeys[monkeyNum]):
            doOneMonkey(monkeyNum,monkeys)

def getGCD(monkeys):
    gcd = 1
    for monkeyNum in range(len(monkeys)):
        if (monkeys[monkeyNum]):
            gcd = gcd * monkeys[monkeyNum]["test"]

    return gcd

def reduceWorry(value,monkeys):
    for monkeyNum in range(len(monkeys)):
        if (monkeys[monkeyNum]):
            for i in range(len(monkeys[monkeyNum]["items"])):
                monkeys[monkeyNum]["items"][i] %= value
   

input = getInput()

# data = arrayFromGridOfDigits(input)
# p(data)

monkeys = readMonkeyData(input)
# p(monkeys)

gcd = getGCD(monkeys)

for i in range(10000):
    if (i%100 == 0):
        # p(i)
        reduceWorry(gcd,monkeys)
    doAllMonkeys(monkeys)

# p(monkeys)

activeCounts = []
for monkeyNum in range(len(monkeys)):
    if (monkeys[monkeyNum]):
        activeCounts.append(monkeys[monkeyNum]["inspections"])

activeCounts.sort(reverse=True)
p(activeCounts)
p(activeCounts[0] * activeCounts[1])