#!/usr/bin/python3
import sys
import fileinput
import json
import re
import math

def p(obj):
    print(json.dumps(obj, indent=2))

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = value

def isNode(x):
    return isinstance(x, list) 

def isLeaf(x):
    return not isinstance(x, list) 

def isLeafPair(x):
    return (isLeaf(x[0]) and isLeaf(x[1]))

# def doPass(x,depth):
#     thisDepth = depth+1
#     if (isArray(x)):
#         if ((thisDepth > 4) and (isPair(x))):
#             # Do explode here
#         else:
#             result = doPass()
#     else:

# def doPass(line):
#     try:
#         explodeIndex = 0
#         while (True): 
#             explodeIndex = re.search("\[(\d),(\d)\]",line[explodeIndex+1:]).start()+explodeIndex+1
#             tb = line[:explodeIndex]
#             if (tb.count("[") - tb.count("]") >= 4):
#                 break
#     except:
#         explodeIndex = len(line)

#     try:
#         splitIndex,splitEnd = re.search("\d{2,}",line).span()
#     except:
#         splitIndex = len(line)

#     # p(explodeIndex)
#     # p(splitIndex)

#     if (explodeIndex < splitIndex):
#         # p("explode")    
#         b,a = line[explodeIndex+1:explodeIndex+4].split(",")
#         before = line[:explodeIndex]
#         after = line[explodeIndex+5:]
#         # p(before)
#         # p(after)

#         try:
#             pIndex = re.search("\d[^\d]+$",before).start()
#             # p(pIndex)
#             # p(before[pIndex])
#             # p(int(b))
#             # p(int(b)+int(before[pIndex]))
#             before = before[:pIndex] + str(int(b)+int(before[pIndex])) + before[pIndex+1:]
#         except:
#             pass

#         try:
#             m = re.search("\d+",after)
#             mIndex = m.start()
#             mLength = len(m.group())
#             after = after[:mIndex] + str(int(a) + int(after[mIndex:mIndex+mLength])) + after[mIndex+mLength:]
#         except:
#             pass

#         result = before + "0" + after
#         p(before +" 0 "+ after)

#     elif (splitIndex < explodeIndex):  # split
#         value = int(line[splitIndex:splitEnd])
#         before = line[:splitIndex]
#         after = line[splitEnd:]
#         result = before + "[" + str(math.floor(value/2)) + "," + str(math.floor((value+1)/2)) + "]" + after
#         p(before + " [" + str(math.floor(value/2)) + "," + str(math.floor((value+1)/2)) + "] " + after)
    
#     else:
#         result = line

#     return result

def doReducePass(data,tracker):
    # thisTracker = {"depth": tracker["depth"]+1, "parent": data}
    result = {}

    # is this a node or a leaf
    if (isLeaf(data)):
        if (data >= 10):
            newData = [math.floor(data/2),math.floor((data+1)/2)]
            data["parent"][data["parentIndex"]] = newData


def reduce(data):
    tracker = {"this": data, "depth": 0, "parent": None, "parentIndex": None}
    doReducePass(data,tracker)

def pNode(node):
    tempNode = {}
    for key in node:
        if (key != "parent"):
            tempNode[key] = node[key]
    p(node)

def findNextLeafIndex(btNodeArray,nodeIndex,nodeBranch = None):
    result = None
    # p([nodeIndex,nodeBranch])
    if (nodeIndex is not None):
        thisNode = btNodeArray[nodeIndex]
        if ((nodeBranch is None) or (nodeBranch > 1)):  # None indicates that we're at the starting point
                                                        # or we've exhausted all possibilities for this node
            result = findNextLeafIndex(btNodeArray,thisNode["parentIndex"],thisNode["thisBranch"]+1)

        elif (thisNode["data"][nodeBranch]["type"] == "leaf"):
            result = thisNode["data"][nodeBranch]["thisIndex"]
        else:
            result = findNextLeafIndex(btNodeArray,thisNode["data"][nodeBranch]["thisIndex"],0)

    return result

def findPreviousLeafIndex(btNodeArray,nodeIndex,nodeBranch = None):
    result = None
    # p([nodeIndex,nodeBranch])
    if (nodeIndex is not None):
        thisNode = btNodeArray[nodeIndex]
        if ((nodeBranch is None) or (nodeBranch < 0)):  # None indicates that we're at the starting point
                                                        # or we've exhausted all possibilities for this node
            result = findPreviousLeafIndex(btNodeArray,thisNode["parentIndex"],thisNode["thisBranch"]-1)

        elif (thisNode["data"][nodeBranch]["type"] == "leaf"):
            result = thisNode["data"][nodeBranch]["thisIndex"]
        else:
            result = findPreviousLeafIndex(btNodeArray,thisNode["data"][nodeBranch]["thisIndex"],1)

    return result

def nodeDepth(btNodeArray,nodeIndex):
    depth = -1
    current = nodeIndex
    while (current is not None):
        depth += 1
        current = btNodeArray[current]["parentIndex"]
    return depth

def btNodeBuilder(btNodeArray,data,parentIndex=None,thisBranch=0):
    btNode = {"parentIndex": parentIndex, "thisBranch": thisBranch}
    btNodeArray.append({})
    thisIndex = len(btNodeArray)-1
    btNode["thisIndex"] = thisIndex
    
    if (isLeaf(data)):
        btNode["type"] = "leaf"
        btNode["data"] = data
    else:
        btNode["type"] = "node"
        btNode["data"] = [btNodeBuilder(btNodeArray,data[0],thisIndex,0),btNodeBuilder(btNodeArray,data[1],thisIndex,1)]

    # p(btNode)
    btNodeArray[thisIndex] = btNode

    return btNode

def btRoot(data):
    btNodeArray = []
    btNodeBuilder(btNodeArray,data)
    return btNodeArray

def btStr(btNodeArray,nodeIndex):
    thisNode = btNodeArray[nodeIndex]
    if (thisNode["type"] == "leaf"):
        return str(thisNode["data"])
    else:
        return "[" + btStr(btNodeArray,thisNode["data"][0]["thisIndex"]) + "," + btStr(btNodeArray,thisNode["data"][1]["thisIndex"]) + "]"

def findReduce(btNodeArray,nodeIndex):
    result = False
    # p(nodeIndex)
    thisNode = btNodeArray[nodeIndex]
    if ((thisNode["type"] == "node") and 
          (thisNode["data"][0]["type"] == "leaf") and
          (thisNode["data"][0]["data"] < 10) and
          (thisNode["data"][1]["type"] == "leaf") and
          (thisNode["data"][1]["data"] < 10) and
          (nodeDepth(btNodeArray,nodeIndex) >= 4)):

        # p("explode")
        previousIndex = findPreviousLeafIndex(btNodeArray,nodeIndex)
        if (previousIndex is not None):
            btNodeArray[previousIndex]["data"] += thisNode["data"][0]["data"]
        nextIndex = findNextLeafIndex(btNodeArray,nodeIndex)
        if (nextIndex is not None):
            btNodeArray[nextIndex]["data"] += thisNode["data"][1]["data"]
        thisNode["type"] = "leaf"
        thisNode["data"] = 0
        result = True
          
    elif ((thisNode["type"] == "leaf") and (thisNode["data"] >= 10)):
        thisNode["type"] = "node"
        value = thisNode["data"]
        thisNode["data"] = [btNodeBuilder(btNodeArray,math.floor(value/2),thisNode["thisIndex"],0),
                            btNodeBuilder(btNodeArray,math.floor((value+1)/2),thisNode["thisIndex"],1)]
        result = True
    
    elif (thisNode["type"] == "node"):
        result = findReduce(btNodeArray,thisNode["data"][0]["thisIndex"])
        if (not result):
            result = findReduce(btNodeArray,thisNode["data"][1]["thisIndex"])

    return result


input = getInput()

# data = arrayFromGridOfDigits(input)
# p(data)

currentStr = input[0]
for line in input[1:2]:
    currentStr = "[" + currentStr + "," + line + "]"
    current = json.loads(currentStr)
    bt = btRoot(current)
    # p(bt[0])
    print(btStr(bt,0))

    while (findReduce(bt,0)):
        p(json.loads(btStr(bt,0)))
        print(btStr(bt,0))
        pass

    currentStr = btStr(bt,0)
    print(currentStr)




# p(findNextLeafIndex(bt,3))
# p(findPreviousLeafIndex(bt,14))
# p(findPreviousLeafIndex(bt,12))
# p(findPreviousLeafIndex(bt,6))
# p(findPreviousLeafIndex(bt,1))
# p(current)
# for line in input[1:2]:
#     currentB = json.loads(line)
#     p(currentB)
#     sum = [current,currentB]
#     p(sum)

#     current = sum
#     reduce(current)

    # reduce
#     previousLine = ""
#     currentLine = sum
#     while (currentLine != previousLine):
#         # p(currentLine)
#         previousLine = currentLine
#         currentLine = doPass(previousLine)

#     sum = currentLine
#     p("= "+sum)

# p(currentLine)
# p("-")

# data = json.loads(input[0])
# p(data)

# p(isinstance(data[0], list))
# p(isinstance(data[1], list))