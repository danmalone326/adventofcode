#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools

debug=True

def p(obj,timePrefix = False, newLine = True):
    if newLine:
        end = "\n"
    else:
        end = ""

    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj,end=end)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2),end=end)

def pd(obj,timePrefix = False,newLine = True):
    if debug:
        p(obj,timePrefix=timePrefix,newLine=newLine)

def pdCharGrid(grid):
    if debug:
        for y in range(len(grid)):
            pd(''.join(grid[y]))

def wait():
    if debug:
        input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfSpaceSeparatedDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.split(" "))])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def getCharGrid(grid,x,y,outOfBoundsChar=None):
    result = None
    if x<0 or x>=len(grid[0]) or y<0 or y>=len(grid):
        result = outOfBoundsChar
    else:
        result = grid[y][x]
    return result

def setCharGrid(grid,x,y,char,ignoreOutOfBounds=False):
    if ignoreOutOfBounds and (x<0 or x>=len(grid[0]) or y<0 or y>=len(grid)):
        pass
    else:
        grid[y][x] = char


def countPositions(data):
    count = 0
    for row in data:
        count += len(row) - row.count('#') - row.count('.')

    return count

def parseInput(input):
    data = []
    for line in input:
        data.append(list(line))
    return data

debug = False

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

map = parseInput(sourceInput)
# pdCharGrid(map)
# pd("")

aGrid = copy.deepcopy(map)
pdCharGrid(aGrid)
pd("")  

for aY in range(len(map)):
    for aX in range(len(map[0])):
        aChar = getCharGrid(grid=map,x=aX,y=aY,outOfBoundsChar=".")
        if aChar != ".":
            for bY in range(aY,len(map)):
                for bX in range(len(map[0])):
                    bChar = getCharGrid(grid=map,x=bX,y=bY,outOfBoundsChar=".")
                    if aChar == bChar and not (aX == bX and aY == bY):
                        dX = bX - aX
                        dY = bY - aY
                        gcd = math.gcd(dX,dY)
                        
                        dX = int(dX/gcd)
                        dY = int(dY/gcd)
                        
                        count=0
                        while True:
                            tX = aX + dX * count
                            tY = aY + dY * count
                            setCharGrid(aGrid,tX,tY,"#",ignoreOutOfBounds=True)
                            if getCharGrid(aGrid,tX,tY) != "#":
                                break
                            count+=1

                        count=0
                        while True:
                            tX = aX + dX * count
                            tY = aY + dY * count
                            setCharGrid(aGrid,tX,tY,"#",ignoreOutOfBounds=True)
                            if getCharGrid(aGrid,tX,tY) != "#":
                                break
                            count-=1

                        pdCharGrid(aGrid)
                        wait()

                      
pdCharGrid(aGrid)

count = 0
for row in aGrid:
    count += row.count('#')

p(count)