#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools

debug=True

def p(obj,timePrefix = False):
    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfSpaceSeparatedDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.split(" "))])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    rules = {}
    updates = []
    blankIndex = findBlankLine(input)

    pattern = r"(\d+)\|(\d+)"
    for i in range(0,blankIndex):
        match = re.search(pattern=pattern,string=input[i])
        if match:
            a = int(match.groups()[0])
            b = int(match.groups()[1])
            keyInit(rules,a,[])
            rules[a].append(b)

    for i in range(blankIndex+1,len(input)):
        updates.append(arrayOfIntFromCSV(input[i]))

    return (rules,updates)

def inOrder(update,rules):
    aIndex = None
    bIndex = None
    ordered = True

    for i in range(1,len(update)):
        # pd(update[i])
        if update[i] in rules:
            for j in range(i):
                # pd(f"- {update[j]}")
                if update[j] in rules[update[i]]:
                    ordered = False
                    aIndex = j
                    break
        else:
            pass
            # pd("no rules")

        if not ordered:
            bIndex = i
            break

    return ordered, aIndex, bIndex


debug = False

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = parseInput(sourceInput)
# pd(data)

rules, updates = data
# pd(rules)

sum = 0
sum2 = 0
for update in updates:
    good, index1, index2 = inOrder(update=update, rules=rules)

    pd((good, index1, index2))

    if good:
        pd(update)
        sum += update[int((len(update)-1)/2)]
    else:
        fixedUpdate = update.copy()
        while True:
            pd(fixedUpdate)
            value1 = fixedUpdate[index1]
            value2 = fixedUpdate[index2]
            fixedUpdate[index1] = value2
            fixedUpdate[index2] = value1
            
            good, index1, index2 = inOrder(update=fixedUpdate, rules=rules)
            pd((good, index1, index2))
            if debug:
                wait()
            if good:
                break

        sum2 += fixedUpdate[int((len(fixedUpdate)-1)/2)]



p(f"good: {sum}")
p(f"fixed: {sum2}")
