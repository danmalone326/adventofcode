#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools

debug=True

def p(obj,timePrefix = False, newLine = True):
    if newLine:
        end = "\n"
    else:
        end = ""

    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj,end=end)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2),end=end)

def pd(obj,timePrefix = False,newLine = True):
    if debug:
        p(obj,timePrefix=timePrefix,newLine=newLine)

def pdCharGrid(grid):
    if debug:
        for y in range(len(grid)):
            pd(''.join(grid[y]))

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfSpaceSeparatedDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.split(" "))])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def getChar(grid,x,y):
    result = None
    if x<0 or x>=len(grid[0]) or y<0 or y>=len(grid):
        result = None
    else:
        result = grid[y][x]
    return result

def findStart(grid):
    x=0
    y=0
    while y < len(grid):
        try:
            x=grid[y].index('^')
        except ValueError:
            x=-1
        if x>=0:
            break
        y += 1

    return (x,y)

def isValidPos(data,x,y):
    return x>=0 and x<len(data[0]) and y>=0 and y<len(data)

def nextPosition(x,y,d):
    nX = x
    nY = y
    if d == "^": 
        nY -= 1
    elif d == ">":
        nX += 1
    elif d == "v":
        nY += 1
    elif d == "<":
        nX -= 1
    else:
        raise ValueError

    return nX,nY

def nextDirection(cDir):
    if cDir == "^": 
        nDir = ">"
    elif cDir == ">":
        nDir = "v"
    elif cDir == "v":
        nDir = "<"
    elif cDir == "<":
        nDir = "^"
    else:
        raise ValueError
    return nDir

def countPositions(data):
    count = 0
    for row in data:
        count += len(row) - row.count('#') - row.count('.')

    return count

def parseInput(input):
    data = []
    for line in input:
        data.append(list(line))
    return data



debug = False

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = parseInput(sourceInput)
pdCharGrid(data)

originalGrid = copy.deepcopy(data)

(originalXPos,originalYPos) = findStart(data)

originalDirection = getChar(data,originalXPos,originalYPos)

(xPos,yPos,direction) = (originalXPos, originalYPos, originalDirection)

while isValidPos(originalGrid,xPos,yPos):
    # pd((xPos,yPos,direction))

    originalGrid[yPos][xPos] = direction

    while True:
        nX, nY = nextPosition(xPos,yPos,direction)
        # pd((nX,nY))
        nextChar = getChar(originalGrid,nX,nY)
        # pd(nextChar)
        if nextChar != "#":
            xPos = nX
            yPos = nY
            break
        else:
            direction = nextDirection(direction)
        
        # wait()

pd(" ")
pdCharGrid(originalGrid)

count = countPositions(originalGrid)
p(count)

loopCounter = 0
tries = 0
for testY in range(len(data)):
    pd("")
    for testX in range(len(data[0])):
        thisOriginalChar = getChar(originalGrid,testX,testY) 
        # pd(thisOriginalChar,newLine=False)
        if thisOriginalChar in [".","#"] or (testY == originalYPos and testX == originalXPos):
            pass
        else:
            tries+=1
            # pd((testX,testY))
            thisGrid = copy.deepcopy(data)
            thisGrid[testY][testX] = "#"

            loopCheck = {
                "^": copy.deepcopy(data),
                ">": copy.deepcopy(data),
                "v": copy.deepcopy(data),
                "<": copy.deepcopy(data),
            }

            (xPos,yPos,direction) = (originalXPos, originalYPos, originalDirection)

            foundLoop = False
            while isValidPos(thisGrid,xPos,yPos):
                # pd((xPos,yPos,direction))

                if getChar(loopCheck[direction],xPos,yPos) == "X":
                    foundLoop = True
                    break

                loopCheck[direction][yPos][xPos] = "X"

                while True:
                    nX, nY = nextPosition(xPos,yPos,direction)
                    # pd((nX,nY))
                    nextChar = getChar(thisGrid,nX,nY)
                    # pd(nextChar)
                    if nextChar != "#":
                        xPos = nX
                        yPos = nY
                        break
                    else:
                        direction = nextDirection(direction)
                    
                    # wait()

            thisGrid[testY][testX] = "O"

            if foundLoop:
                loopCounter += 1
                pdCharGrid(thisGrid)
                pd("")

p(loopCounter)
pd(tries)
