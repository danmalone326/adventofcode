#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools

debug=True

def p(obj,timePrefix = False, newLine = True):
    if newLine:
        end = "\n"
    else:
        end = ""

    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [set,frozenset]:
        printableObj = list(obj)
    else:
        printableObj = obj

    if type(printableObj) in [str,int]:
        print(printableObj,end=end)
    else:
        if timePrefix:
            print('')
        print(json.dumps(printableObj, indent=2),end=end)

def pd(obj,timePrefix = False,newLine = True):
    if debug:
        p(obj,timePrefix=timePrefix,newLine=newLine)

def pdCharGrid(grid):
    if debug:
        for y in range(len(grid)):
            pd(''.join(grid[y]))

def wait():
    if debug:
        input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfSpaceSeparatedDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.split(" "))])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i
    return -1

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def initGrid(xSize,ySize,obj):
    grid = []
    for y in range(ySize):
        row = []
        for x in range(xSize):
            row.append(copy.deepcopy(obj))
        grid.append(row)
    return grid

def getGrid(grid,x,y,outOfBoundsObj=None):
    result = None
    if x<0 or x>=len(grid[0]) or y<0 or y>=len(grid):
        result = outOfBoundsObj
    else:
        result = grid[y][x]
    return result

def setGrid(grid,x,y,obj):
    grid[y][x] = obj

def findGrid(grid,obj):
    for y in range(len(grid)):
        for x in range(len(grid[0])):
            if getGrid(grid,x,y) == obj:
                return x,y

def setBit(value,bit):
    return value | (1<<bit)

def clearBit(value,bit):
    return value & ~(1<<bit)

def getBit(value,bit):
    return value & 1 << bit != 0 

dirList = ["^",">","v","<"]
def nextPosition(x,y,d):
    nX = x
    nY = y
    if d == "^": 
        nY -= 1
    elif d == ">":
        nX += 1
    elif d == "v":
        nY += 1
    elif d == "<":
        nX -= 1
    else:
        raise ValueError

    return nX,nY

def parseInput(input):
    data = {}
    blankIndex = findBlankLine(input)
    for line in input[:blankIndex]:
        key,value = line.split(":")
        data[key] = int(value.strip())

    for line in input[blankIndex+1:]:
        splitLine = line.split(" ")
        data[splitLine[-1]] = splitLine[:3]

    return data

def pdLogic(data):
    for key in sorted(data):
        if isinstance(data[key], int):
            pd(f"{data[key]} -> {key}")
        else: 
            pd(" ".join(data[key] + ["->",key]))

def getValue(data,key):
    result = None
    if key in data:
        if isinstance(data[key], int):
            return data[key]
        else:
            formula = data[key]
            a = getValue(data,formula[0])
            b = getValue(data,formula[2])

            operator = formula[1]
            if operator == "AND":
                result = a & b
            elif operator == "XOR":
                result = a ^ b
            elif operator == "OR":
                result = a | b

            # data[key] = result

    return result

def filterKeys(data,char):
    return list(filter(lambda x: x.startswith(char) ,data.keys()))

def getNumber(data,char):
    result = 0
    for key in reversed(sorted(filterKeys(data,char))):
        value = getValue(data,key)
        # pd(f"value: {value}")
        if value != None:
            result = (result << 1) + value
        else: 
            result = None
            break
        # pd(f"result: {result}")
    return result

def bitKey(char,bit):
    return f"{char}{bit:>02d}"

def checkBit(data,bit):
    pd(f"bit: {bit}")
    xKey = bitKey("x",bit)
    yKey = bitKey("y",bit)
    zKey = bitKey("z",bit)
    xPrevKey = bitKey("x",bit-1)
    yPrevKey = bitKey("y",bit-1)
    working = True
    for xBit in range(2):
        for yBit in range(2):
            for xPrevBit in range(2):
                for yPrevBit in range(2):

                    data[xKey] = xBit
                    data[yKey] = yBit
                    if bit > 0:
                        data[xPrevKey] = xPrevBit
                        data[yPrevKey] = yPrevBit                        

                    zValue = getValue(data,zKey)
                    expected = (xBit ^ yBit) ^ (xPrevBit & yPrevBit)
                    pd(f"xKey: {xKey}  yKey: {yKey}  xPrevKey: {xPrevKey}  yPrevKey: {yPrevKey}  zKey: {zKey}")
                    pd(f"x: {xBit}  y: {yBit} xP: {xPrevBit}  yP: {yPrevBit}  z: {zValue}  cmp: {expected}")
                    working = zValue == expected
                    if not working: 
                        break
                if not working:
                    break
            if not working: 
                break
        if not working:
            break

    return working
            
def checkAllBits(data):
    numBits = len(filterKeys(data,"z"))

    tempData = copy.deepcopy(data)
    for bit in range(numBits):
        xKey = bitKey("x",bit)
        yKey = bitKey("y",bit)
        tempData[xKey] = 0
        tempData[yKey] = 0

    unmatchedBits = []
    for i in range(numBits):
        if not checkBit(tempData,i):
            unmatchedBits.append(i)

    return unmatchedBits

def getDependencies(data,key):
    thisSet = set()
    # pd(f"checking: {key}")
    if isinstance(data[key], int):
        pass
    else:
        thisSet.update({key})
        formula = data[key]
        thisSet.update(getDependencies(data,formula[0]))
        thisSet.update(getDependencies(data,formula[2]))
        
    return thisSet

def getParentDependencies(data,key,loopDetectList = set()):
    thisSet = set()
    # pd(f"checking: {key}")
    if isinstance(data[key], int):
        pass
    elif key in loopDetectList:
        raise ValueError("Loop detected")
    else:
        thisSet.update({key})
        formula = data[key]
        thisSet.update(getParentDependencies(data,formula[0],thisSet))
        thisSet.update(getParentDependencies(data,formula[2],thisSet))
        
    return thisSet

def getAllParentDependencies(data):
    result = {}
    for key in data:
        result[key] = getParentDependencies(data,key)
    return result

def getBrokenBitDependencyCount(data):
    brokenBits = checkAllBits(originalData)
    # pd(brokenBits)

    pd(f"broken bits: {len(brokenBits)}")

    brokenBitDependencyCount = {}
    dependencyList = set()
    for i in reversed(range(len(brokenBits))):
        thisKey = bitKey("z",brokenBits[i])
        thisSet = getDependencies(originalData,thisKey)
        brokenBitDependencyCount[thisKey] = len(thisSet)
        dependencyList.update(thisSet)

    pd(f"broken dep count: {len(brokenBitDependencyCount)}")

    return brokenBitDependencyCount, dependencyList

def hasLoop(data,key=None,seenSet = None, level=0):
    # pd(f"key: {key}  level: {level}")
    if level > 100:
        raise ValueError(level)
    result = False
    if key == None:
        for startKey in data.keys():
            result = hasLoop(data,startKey, level=level+1)
            if result:
                break
    elif seenSet == None:
        if isinstance(data[key], int):
            pass
        else:
            newSet = {key}
            formula = data[key]
            result = hasLoop(data,formula[0],newSet, level=level+1) | hasLoop(data,formula[2],newSet, level=level+1)
    else:
        if key in seenSet:
            result = True
        elif isinstance(data[key], int):
            pass
        else:
            newSet = seenSet.union({key})
            formula = data[key]
            result = hasLoop(data,formula[0],newSet, level=level+1) | hasLoop(data,formula[2],newSet, level=level+1)

    return result

def keyListToCsv(keyList):
    return ','.join(sorted(keyList))


def getMismatches(data):
    mismatches = []
    for key in data:
        good = True
        if isinstance(data[key], int):
            continue

        a,op,b = data[key]
        if isinstance(data[a], int):
            aop = "INT"
        else:
            aop = data[a][1]

        if isinstance(data[b], int):
            bop = "INT"
        else:
            bop = data[b][1]
        

        if op == "OR":
            if aop != "AND" or bop != "AND":
                good = False

        elif op == "AND" or op == "XOR":
            if aop == "INT" and bop == "INT":
                pass
            elif aop == "XOR" and bop == "OR":
                pass
            elif bop == "XOR" and aop == "OR":
                pass
            else:
                good = False


        if not good:
            mismatches.append(key)

    return mismatches

def swapKeys(data,keyPairList):
    for keyPair in keyPairList:

        temp = data[keyPair[0]]
        data[keyPair[0]] = data[keyPair[1]]
        data[keyPair[1]] = temp

#################


showKeys = False
hideKnownCarryBits = True

def sortedLogicStr(formula):
    a = formula[0]
    b = formula[2]
    if a>b:
        b = formula[0]
        a = formula[2]
    
    return f"( {a} {formula[1]} {b} )"

def logicStr(data,key):
    result = None
    if isinstance(data[key], int):
        result = key
    elif hideKnownCarryBits and key in [myCarryBitMap[a] for a in myCarryBitMap]:
        bit = [a for a in myCarryBitMap if myCarryBitMap[a] == key][0]
        result = f"( CARRY IN {bit} )"
        if showKeys:
            result = result[:-1] + f"[{key}])"
    else:
        formula = data[key]
        result = sortedLogicStr([logicStr(data,formula[0]),formula[1],logicStr(data,formula[2])]) 
        if showKeys:
            result = result[:-1] + f"[{key}])"

    return result

def xBitStr(bit):
    return bitKey("x",bit)

def yBitStr(bit):
    return bitKey("y",bit)

def andStr(a,b):
    return sortedLogicStr([a,"AND",b])

def orStr(a,b):
    return sortedLogicStr([a,"OR",b])

def xorStr(a,b):
    return sortedLogicStr([a,"XOR",b])

def carryBitStr(bit):
    if hideKnownCarryBits:
        result = f"( CARRY IN {bit} )"
    else:
        result = andStr(xBitStr(bit),yBitStr(bit))
        if bit > 0:
            result = orStr(result,andStr(xorStr(xBitStr(bit),yBitStr(bit)),carryBitStr(bit-1)))
    return result

def sumBitStr(bit):
    result = xorStr(xBitStr(bit),yBitStr(bit))
    if bit > 0:
        result = xorStr(carryBitStr(bit-1),result)
    return result

def findKey(data,a,op,b,failNote=None):
    result = None
    for key in data:
        if isinstance(data[key], int):
            continue
        formula = data[key]
        if op == formula[1] and ((a == formula[0] and b == formula[2]) or (b == formula[0] and a == formula[2])):
            result = key
            break
    if result == None:
        pd(f"Could not find: {a} {op} {b}",newLine=False)
        if failNote != None:
            pd(f" - {failNote}")
        else:
            pd("")
    return result


debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

originalData = parseInput(sourceInput)
# pd(data)
pd(getNumber(originalData,"z"))
pd("===")

data = originalData


swapPairs = [
    ["z12","fgc"],
    ["z29","mtj"],
    ["vvm","dgr"],
    ["z37","dtv"]
]

swapKeys(data,swapPairs)

myCarryBitMap = {
    0: "njb",
    1: "hfp"
}

knownKeys = {}

for bit in range(43):

    this = {}
    xor1 = findKey(data,bitKey("x",bit),"XOR",bitKey("y",bit),f" - bit {bit} XOR1 mapping.")
    this["XOR1"] = xor1

    and1 = findKey(data,bitKey("x",bit),"AND",bitKey("y",bit),f" - bit {bit} AND1 mapping.")
    this["AND1"] = and1

    if bit == 0:
        this["SUM"] = this["XOR1"]
        this["CARRY"] = this["AND1"]
    else:
        previousCarry = knownKeys[bit-1]["CARRY"]

        xor2 = findKey(data,this["XOR1"],"XOR",previousCarry,f" - bit {bit} XOR2 mapping.")
        this["XOR2"] = xor2

        and2 = findKey(data,this["XOR1"],"AND",previousCarry,f" - bit {bit} AND2 mapping.")
        this["AND2"] = and2

        if xor2 == None and and2 == None:
            possibleSum = data[bitKey('z',bit)]
            pd(f"Possible XOR2: {sortedLogicStr(possibleSum)}")
            break

        or1 = findKey(data,this["AND1"],"OR",this["AND2"],f" - bit {bit} OR1 mapping.")
        this["OR1"] = or1

        if or1 == None:
            pd(f"AND1: {and1}  AND2: {and2}  XOR2: {xor2}")


        this["SUM"] = xor2
        this["CARRY"] = or1

    knownKeys[bit] = this

    key = bitKey("z",bit)
    # pd(logicStr(data,key))
    # pd(sumBitStr(bit))
    # pd("-")

pd(swapPairs)
swappedList = []
for a in swapPairs:
    swappedList.extend(a)

pd(swappedList)
pd(keyListToCsv(swappedList))

# pd(knownKeys)

# startKey = 0


# for i in range(43):
#     key = bitKey("z",i)
#     pd(f"{key}: ", newLine=False)
#     found = key
#     expected = knownKeys[i]["SUM"]
#     if found == expected:
#         pd("same")
#     else:
#         pd("different")
#     pd(found)
#     pd(expected)

#     if found != expected:
#         pd(knownKeys[i])
#         break


# for i in range(43):
#     key = bitKey("z",i)
#     pd(f"{key}: ", newLine=False)
#     found = logicStr(data,key)
#     expected = sumBitStr(i)
#     if found == expected:
#         pd("same")
#     else:
#         pd("different")
#     pd(found)
#     pd(expected)

#     if found != expected:
#         break


# cb = checkAllBits(data)
# pd(len(cb))

# sys.exit(0)

# mismatches = getMismatches(data)
# pd(mismatches)

# possibleSwitchCount = {}
# for key in mismatches:
#     keyInit(possibleSwitchCount,data[key][0],0)
#     possibleSwitchCount[data[key][0]] += 1
#     keyInit(possibleSwitchCount,data[key][2],0)
#     possibleSwitchCount[data[key][2]] += 1

# pd(possibleSwitchCount)


# checkedAlready = set()
# count = 0
# tryCount = 0
# minLen = 999
# level1List = possibleSwitchCount.keys()
# for pair1 in itertools.combinations(level1List,2):
#     level2List = list(set(level1List) - set(pair1))
#     for pair2 in itertools.combinations(level2List,2):
#         level3List = list(set(level2List) - set(pair2))
#         for pair3 in itertools.combinations(level3List,2):
#             level4List = list(set(level3List) - set(pair3))
#             for pair4 in itertools.combinations(level4List,2):
#                 tryStr = keyListToCsv([keyListToCsv(pair1),keyListToCsv(pair2),keyListToCsv(pair3),keyListToCsv(pair4)])
#                 count += 1
#                 if count%10000 == 0:
#                     pd(f"Loops: {count}",timePrefix=True)
#                 if tryStr in checkedAlready:
#                     continue

#                 tryCount += 1
#                 if tryCount%10000 == 0:
#                     pd(f"Trys: {tryCount}",timePrefix=True)

#                 checkedAlready.add(tryStr)

#                 testData = copy.deepcopy(originalData)
#                 swapKeys(testData,[pair1,pair2,pair3,pair4])
#                 tempMismatches = getMismatches(data)
#                 if len(tempMismatches) < minLen:
#                     pd(f"Found: len: {len(tempMismatches)} - {tryStr}")
#                     minLen = len(tempMismatches)

# pd(len(checkedAlready))
# pd(minLen)



# key2 = bitKey("z",startKey+1)
# pd(logicStr(data,key2))

# key3 = bitKey("z",startKey+2)
# pd(logicStr(data,key3))

# zeroData = copy.deepcopy(originalData)
# for i in range(len(filterKeys(zeroData,"x"))):
#     zeroData[bitKey("x",i)] = 0
#     zeroData[bitKey("y",i)] = 0

# data = copy.deepcopy(originalData)

# parentDependencies = getAllParentDependencies(data)
# brokenBits = checkAllBits(data)
# pd(f"broken bits: {len(brokenBits)}")

# for key in sorted([k for k in data if k.startswith("z")]):
#     pd(f"{key}: {len(parentDependencies[key])}  {int(key[1:]) in brokenBits}")

# potentialSwaps = set()
# for i in brokenBits:
#     key = bitKey("z",i)
#     potentialSwaps.add(key)
#     potentialSwaps.update(parentDependencies[key])

# pd(len(potentialSwaps))

# swapKey1 = sorted([bitKey("z",i) for i in brokenBits],key=lambda x: len(parentDependencies[x]))[0]

# for swapKey2 in potentialSwaps:
#     pd(f"{swapKey1} - {swapKey2} = ",newLine=False)
#     if swapKey2 == swapKey1:
#         pd("same")
#         continue

#     if swapKey1 in parentDependencies[swapKey2] or swapKey2 in parentDependencies[swapKey1]:
#         pd('loop detected')
#         continue

#     # pdLogic(data)
#     # pd("---")
#     tempData = copy.deepcopy(data)
#     # do the swap
#     tempFormula = tempData[swapKey1]
#     tempData[swapKey1] = tempData[swapKey2]
#     tempData[swapKey2] = tempFormula

#     # pdLogic(data)
#     try:
#         newBrokenBits = checkAllBits(tempData)
#         pd(f"new broken bits: {len(newBrokenBits)}")
#     except RecursionError as e:
#         pd(e.args[0])

#     break


# pd(swapKey1)
# pd("njb" in potentialSwaps)
# pd("x00" in parentDependencies[swapKey1])
# pd("rrd" in parentDependencies["z33"])


# brokenBitDependencyCount, dependencyList = getBrokenBitDependencyCount(data)

# for key in sorted(brokenBitDependencyCount.keys(), key=lambda x: brokenBitDependencyCount[x]):
#     pd(f"{key}: {brokenBitDependencyCount[key]}")

# swapKey1 = sorted(brokenBitDependencyCount.keys(), key=lambda x: brokenBitDependencyCount[x])[0]
# for swapKey2 in dependencyList:
#     if swapKey2 == swapKey1:
#         continue

#     data = copy.deepcopy(originalData)
#     swapFormula1 = data[swapKey1]
#     swapFormula2 = data[swapKey2]
#     data[swapKey1] = swapFormula2
#     data[swapKey2] = swapFormula1
#     thisHasLoop = hasLoop(data)
#     if thisHasLoop:
#         pd("found loop")
#     else:
#         pd(f'good swap {swapKey1} and {swapKey2}')
#         brokenBits, dl2 = getBrokenBitDependencyCount(data)