#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools

debug=True

def p(obj,timePrefix = False):
    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2))

def pd(obj):
    if debug:
        p(obj)

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def parseInput(input):
    a = []
    b = []
    pattern = r"(\d+)\s*(\d+)"

    for line in input:
        match = re.search(pattern=pattern, string=line)
        if match:
            a.append(int(match.group(1)))
            b.append(int(match.group(2)))

    a.sort()
    b.sort()

    return (a,b)

debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

a,b = parseInput(sourceInput)
#pd((a,b))

d = 0
for i in range(len(a)):
    d += abs(b[i] - a[i])

p(d)

ai=0
bi=0
ssTotal=0

while (ai<len(a) and bi<len(b)):
    thisNum = a[ai]
    ac = 0
    bc = 0

    while ((bi < len(b)) and (b[bi] < thisNum)):
        bi+=1

    while ((bi < len(b)) and (b[bi] == thisNum)):
        bi+=1
        bc+=1

    while ((ai < len(a)) and (a[ai] == thisNum)):
        ai+=1
        ac+=1

    # p(f"ai: {ai} a[ai]: {a[ai]} ac: {ac} bi:{bi} b[bi]: {b[bi]} bc: {bc}")

    ss = bc*ac*thisNum
    p(ss)
    ssTotal += ss


p(ssTotal)
