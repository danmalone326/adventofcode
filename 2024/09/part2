#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools

debug=True

def p(obj,timePrefix = False, newLine = True):
    if newLine:
        end = "\n"
    else:
        end = ""

    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj,end=end)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2),end=end)

def pd(obj,timePrefix = False,newLine = True):
    if debug:
        p(obj,timePrefix=timePrefix,newLine=newLine)

def pdCharGrid(grid):
    if debug:
        for y in range(len(grid)):
            pd(''.join(grid[y]))

def wait():
    if debug:
        input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfSpaceSeparatedDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.split(" "))])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def getCharGrid(grid,x,y,outOfBoundsChar=None):
    result = None
    if x<0 or x>=len(grid[0]) or y<0 or y>=len(grid):
        result = outOfBoundsChar
    else:
        result = grid[y][x]
    return result

def setCharGrid(grid,x,y,char):
    grid[y][x] = char

def parseInput(input):
    numList = arrayOfIntFromList(input[0])
    fileCount = math.floor((len(numList) + 1)/2)

    data = {
        "first": None,
        "last": None
    }

    firstFile = {
        "id": 0,
        "start": 0,
        "length": numList[0],
        "defragged": False,
        "next": None,
        "previous": None
    }

    data["first"] = firstFile

    previous = firstFile
    for id in range(1,fileCount):
        thisFile = {
            "id": id,
            "start": previous["start"] + previous["length"] + numList[id*2-1],
            "length": numList[id*2],
            "defragged": False,
            "next": None,
            "previous": previous
        }
        previous["next"] = thisFile
        previous = thisFile

    data["last"] = previous

    return data

def getNextID(data):
    pass


debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = parseInput(sourceInput)
# pd(data)

this = data["first"]
while this:
    pd(f'id: {this["id"]}  start: {this["start"]}  length: {this["length"]}')
    this = this["next"]


# defrag
while not data["first"]["defragged"]:
    defragThis = data["last"]
    while defragThis["defragged"]:
        defragThis = defragThis["previous"]

    defragThis["defragged"] = True
    lengthNeeded = defragThis["length"]

    gapAfter = data["first"]
    while gapAfter and gapAfter["start"] < defragThis["start"] and gapAfter["next"]["start"] - gapAfter["start"] - gapAfter["length"] < lengthNeeded:
        gapAfter = gapAfter["next"]

    if gapAfter["start"] < defragThis["start"]:
        defragThis["previous"]["next"] = defragThis["next"]
        if defragThis["next"]:
            defragThis["next"]["previous"] = defragThis["previous"]
        else:
            data["last"] = defragThis["previous"]

        defragThis["next"] = gapAfter["next"]
        gapAfter["next"] = defragThis

        defragThis["next"]["previous"] = defragThis
        defragThis["previous"] = gapAfter

        defragThis["start"] = gapAfter["start"] + gapAfter["length"]


pd("")
this = data["first"]
while this:
    pd(f'id: {this["id"]}  start: {this["start"]}  length: {this["length"]}')
    this = this["next"]

pd("")
checksum = 0
this = data["first"]
while this:
    pd(f'id: {this["id"]}  start: {this["start"]}  length: {this["length"]}')
    for i in range(this["start"],this["start"] + this["length"]):
        checksum += i*this["id"]
        
    this = this["next"]


p(checksum)