#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools

debug=True

def p(obj,timePrefix = False, newLine = True):
    if newLine:
        end = "\n"
    else:
        end = ""

    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj,end=end)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2),end=end)

def pd(obj,timePrefix = False,newLine = True):
    if debug:
        p(obj,timePrefix=timePrefix,newLine=newLine)

def pdCharGrid(grid):
    if debug:
        for y in range(len(grid)):
            pd(''.join(grid[y]))

def wait():
    if debug:
        input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfChar(input):
    rows = []
    for line in input:
        rows.append(list(line.strip()))
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfSpaceSeparatedDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.split(" "))])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def getCharGrid(grid,x,y,outOfBoundsChar=None):
    result = None
    if x<0 or x>=len(grid[0]) or y<0 or y>=len(grid):
        result = outOfBoundsChar
    else:
        result = grid[y][x]
    return result

def setCharGrid(grid,x,y,obj):
    grid[y][x] = obj

def parseInput(input):
    data = arrayFromGridOfChar(input)
    return data

debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = parseInput(sourceInput)
pdCharGrid(data)

paths = []
for y in range(len(data)):
    paths.append([])
    for x in range(len(data[0])):
        paths[y].append(0)

# paths = [set() * len(data[0]) for i in range(len(data))]

sum=0
for i in reversed(range(10)):
    for y in range(len(data)):
        for x in range(len(data[0])):
            if getCharGrid(data,x,y) == str(i):
                if i==9:
                    value = 1
                    setCharGrid(paths,x,y,value)
                else:
                    value = 0
                    if getCharGrid(data,x-1,y,0) == str(i+1):
                        value += getCharGrid(paths,x-1,y,0)
                    if getCharGrid(data,x+1,y,0) == str(i+1):
                        value += getCharGrid(paths,x+1,y,0)
                    if getCharGrid(data,x,y-1,0) == str(i+1):
                        value += getCharGrid(paths,x,y-1,0)
                    if getCharGrid(data,x,y+1,0) == str(i+1):
                        value += getCharGrid(paths,x,y+1,0)
                    setCharGrid(paths,x,y,value)
                    # pd(len(value))
                    # pd(list(value))
                    if i==0:
                        sum += value
                        # pd(value)
# pd(paths)
p(sum)