#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools

debug=True

def p(obj,timePrefix = False, newLine = True):
    if newLine:
        end = "\n"
    else:
        end = ""

    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj,end=end)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2),end=end)

def pd(obj,timePrefix = False,newLine = True):
    if debug:
        p(obj,timePrefix=timePrefix,newLine=newLine)

def pdCharGrid(grid):
    if debug:
        for y in range(len(grid)):
            pd(''.join(grid[y]))

def wait():
    if debug:
        input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfSpaceSeparatedDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.split(" "))])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def getGrid(grid,x,y,outOfBoundsObj=None):
    result = None
    if x<0 or x>=len(grid[0]) or y<0 or y>=len(grid):
        result = outOfBoundsObj
    else:
        result = grid[y][x]
    return result

def setGrid(grid,x,y,obj):
    grid[y][x] = obj

def setBit(value,bit):
    return value | (1<<bit)

def clearBit(value,bit):
    return value & ~(1<<bit)

def getBit(value,bit):
    return value & 1 << bit != 0 

def areaPerimeter(data,used,x,y):
    char = getGrid(data,x,y,None)

    # pd(char)
    # pd(f"{x},{y}")
    # pd(used[y])
    # wait()

    area=0
    perimeter=0


    if not getBit(used[y],x):
        used[y] = setBit(used[y],x)
        area+=1
    
        nx = x+1
        ny = y
        if getGrid(data,nx,ny) == char:
            if not getBit(used[ny],nx):
                areaInc,perimeterInc = areaPerimeter(data,used,nx,ny)
                area += areaInc
                perimeter += perimeterInc
        else:
            perimeter += 1

        nx = x-1
        ny = y
        if getGrid(data,nx,ny) == char:
            if not getBit(used[ny],nx):
                areaInc,perimeterInc = areaPerimeter(data,used,nx,ny)
                area += areaInc
                perimeter += perimeterInc
        else:
            perimeter += 1

        nx = x
        ny = y+1
        if getGrid(data,nx,ny) == char:
            if not getBit(used[ny],nx):
                areaInc,perimeterInc = areaPerimeter(data,used,nx,ny)
                area += areaInc
                perimeter += perimeterInc
        else:
            perimeter += 1

        nx = x
        ny = y-1
        if getGrid(data,nx,ny) == char:
            if not getBit(used[ny],nx):
                areaInc,perimeterInc = areaPerimeter(data,used,nx,ny)
                area += areaInc
                perimeter += perimeterInc
        else:
            perimeter += 1

    return area, perimeter


def parseInput(input):
    data = input
    return data

debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = parseInput(sourceInput)
pd(data)

used = [0] * len(data)

sum = 0
for y in range(len(data)):
    for x in range(len(data[0])):
        if not getBit(used[y],x):
            area,perimeter = areaPerimeter(data,used,x,y)
            sum += area*perimeter

p(sum)