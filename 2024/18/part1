#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools

debug=True

def p(obj,timePrefix = False, newLine = True):
    if newLine:
        end = "\n"
    else:
        end = ""

    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [set,frozenset]:
        printableObj = list(obj)
    else:
        printableObj = obj

    if type(printableObj) in [str,int]:
        print(printableObj,end=end)
    else:
        if timePrefix:
            print('')
        print(json.dumps(printableObj, indent=2),end=end)

def pd(obj,timePrefix = False,newLine = True):
    if debug:
        p(obj,timePrefix=timePrefix,newLine=newLine)

def pdCharGrid(grid):
    if debug:
        for y in range(len(grid)):
            pd(''.join(grid[y]))

def wait():
    if debug:
        input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfSpaceSeparatedDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.split(" "))])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def getGrid(grid,x,y,outOfBoundsObj=None):
    result = None
    if x<0 or x>=len(grid[0]) or y<0 or y>=len(grid):
        result = outOfBoundsObj
    else:
        result = grid[y][x]
    return result

def setGrid(grid,x,y,obj):
    grid[y][x] = obj

def setBit(value,bit):
    return value | (1<<bit)

def clearBit(value,bit):
    return value & ~(1<<bit)

def getBit(value,bit):
    return value & 1 << bit != 0 

def parseInput(input):
    data = []
    for line in input:
        data.append([int(a) for a in line.split(',')])
    return data

def getEmptyNeighbors(grid,pathCost,x,y):
    neighbors = set()
    if getGrid(grid,x+1,y) == '.' and getGrid(pathCost,x+1,y,-1) == None:
        neighbors.add((x+1,y))
    if getGrid(grid,x-1,y) == '.' and getGrid(pathCost,x-1,y,-1) == None:
        neighbors.add((x-1,y))
    if getGrid(grid,x,y+1) == '.' and getGrid(pathCost,x,y+1,-1) == None:
        neighbors.add((x,y+1))
    if getGrid(grid,x,y-1) == '.' and getGrid(pathCost,x,y-1,-1) == None:
        neighbors.add((x,y-1))
    return neighbors

def getLowestNeighbor(grid,x,y):
    # pd((x,y))
    neighborCosts = []
    thisCost = getGrid(grid,x+1,y)
    if thisCost != None:
        neighborCosts.append(thisCost)
    thisCost = getGrid(grid,x-1,y)
    if thisCost != None:
        neighborCosts.append(thisCost)
    thisCost = getGrid(grid,x,y+1)
    if thisCost != None:
        neighborCosts.append(thisCost)
    thisCost = getGrid(grid,x,y-1)
    if thisCost != None:
        neighborCosts.append(thisCost)
    if len(neighborCosts) > 0:
        result = min(neighborCosts)
    return result

def findShortestPath(grid,start,end):
    pathCost = []
    for y in range(len(grid)):
        row = []
        for x in range(len(grid[0])):
            row.append(None)
        pathCost.append(row)

    setGrid(pathCost,end[0],end[1],0)
    checkSet = set()
    checkSet.update(getEmptyNeighbors(grid,pathCost,end[0],end[1]))

    while checkSet and getGrid(pathCost,start[0],start[1]) == None:
        # pd(".",newLine=False)
        x,y = checkSet.pop()
        myCost = getLowestNeighbor(pathCost,x,y) + 1
        setGrid(pathCost,x,y,myCost)
        checkSet.update(getEmptyNeighbors(grid,pathCost,x,y))

    # pd(".")
    result = getGrid(pathCost,start[0],start[1])
    return result


def isFallen(data,x,y,time):
    return [x,y] in data[:time]


def makeGrid(data,gridMax,time):
    grid = []
    for y in range(gridMax+1):
        row = []
        for x in range(gridMax+1):
            if isFallen(data,x,y,time):
                char = "#"
            else:
                char = "."
            row.append(char)
        grid.append(row)
    return grid



debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)
gridMax,time = [int(a) for a in sourceInput[0].split(",")]
data = parseInput(sourceInput[1:])

pd(gridMax)
pd(time)
# pd(data)
minTime = 1
maxTime = len(data)

while minTime != maxTime:
    tryTime = math.ceil((minTime + maxTime) / 2)
    pd(f"min: {minTime}  max: {maxTime}")
    p(f"time: {tryTime}  x,y: {data[tryTime-1][0]},{data[tryTime-1][1]}")
    grid = makeGrid(data,gridMax,tryTime)
    # pdCharGrid(grid)
    pathLength = findShortestPath(grid,(0,0),(gridMax,gridMax))
    p(pathLength)
    if pathLength == None:
        maxTime = tryTime-1
    else:
        minTime = tryTime
    # wait()