#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools

debug=True

def p(obj,timePrefix = False, newLine = True):
    if newLine:
        end = "\n"
    else:
        end = ""

    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj,end=end)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2),end=end)

def pd(obj,timePrefix = False,newLine = True):
    if debug:
        p(obj,timePrefix=timePrefix,newLine=newLine)

def pdCharGrid(grid):
    if debug:
        for y in range(len(grid)):
            pd(''.join(grid[y]))

def wait():
    input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfSpaceSeparatedDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.split(" "))])
    return rows

# one line in returns an array
def arrayOfIntFromSpaceSeparatedDigits(line):
    return [int(c) for c in list(line.strip().split(" "))]
 
# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def getCharGrid(grid,x,y,outOfBoundsChar=None):
    result = None
    if x<0 or x>=len(grid[0]) or y<0 or y>=len(grid):
        result = outOfBoundsChar
    else:
        result = grid[y][x]
    return result

def setCharGrid(grid,x,y,char):
    grid[y][x] = char

def getBitValue(binData,bitPosition):
    return ((binData>>bitPosition) & 1)

def decToBase(num,base,digits):
    nums = []
    if num == 0:
        nums.append("0")
    else:
        while num:
            num, r = divmod(num, base)
            nums.append(str(r))
    return ''.join(reversed(nums)).zfill(digits)

def parseInput(input):
    data = []
    for line in input:
        a,b = line.split(":")
        testValue = int(a)
        operands = arrayOfIntFromSpaceSeparatedDigits(b)
        data.append({
            "testValue": testValue,
            "operands": operands
        })
    return data

debug = False

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = parseInput(sourceInput)
pd(data)

operatorOptions = ["+","*","|"]
operatorOptionCount = len(operatorOptions)

result = 0
for test in data:
    testValue = test["testValue"]
    operands = test["operands"]

    operatorCount = len(operands)-1
    # pd(f"operatorCount: {operatorCount}")
    found = False
    for counter in range(operatorOptionCount**operatorCount):
        # pd(f"operatorBin: {operatorBin}")
        operatorIndex = decToBase(counter,operatorOptionCount,operatorCount)
        pd(operatorIndex)
        value = operands[0]
        for i in range(operatorCount):
            operator = operatorOptions[int(operatorIndex[i])]
            if operator == "+":
                value += operands[i+1]
            elif operator == "*":
                value *= operands[i+1]
            elif operator == "|":
                value = int(str(value) + str(operands[i+1]))

        if value == testValue:
            found = True
            # pd(" - True")
            break
        else:
            pass
            # pd(" - False")

    # pd("")
    if found:
        result += testValue

p(result)