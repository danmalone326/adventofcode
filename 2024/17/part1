#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools

debug=True

def p(obj,timePrefix = False, newLine = True):
    if newLine:
        end = "\n"
    else:
        end = ""

    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj,end=end)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2),end=end)

def pd(obj,timePrefix = False,newLine = True):
    if debug:
        p(obj,timePrefix=timePrefix,newLine=newLine)

def pdCharGrid(grid):
    if debug:
        for y in range(len(grid)):
            pd(''.join(grid[y]))

def wait():
    if debug:
        input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfSpaceSeparatedDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.split(" "))])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def getGrid(grid,x,y,outOfBoundsObj=None):
    result = None
    if x<0 or x>=len(grid[0]) or y<0 or y>=len(grid):
        result = outOfBoundsObj
    else:
        result = grid[y][x]
    return result

def setGrid(grid,x,y,obj):
    grid[y][x] = obj

def setBit(value,bit):
    return value | (1<<bit)

def clearBit(value,bit):
    return value & ~(1<<bit)

def getBit(value,bit):
    return value & 1 << bit != 0 

def getNextOp(data):
    ptr = data["ptr"]
    if ptr < len(data["instructions"]) - 1:
        opcode = data["instructions"][ptr]
        operand = data["instructions"][ptr+1]
    else:
        opcode = None
        operand = None

    return opcode,operand

def getComboOperandValue(data,operand):
    value = None
    if operand <= 3:
        value = operand
    elif operand == 4:
        value = data["a"]
    elif operand == 5:
        value = data["b"]
    elif operand == 6:
        value = data["c"]

    return value

def computeNext(data):
    opcode,operand = getNextOp(data)
    
    result = True
    alreadyJumped = False

    if opcode is None:
        result = False
    
    else: 
        comboOperand = getComboOperandValue(data,operand)

        # pd(f'ptr: {data["ptr"]:2} opcode: {opcode}  operand: {operand} a: {data["a"]:9}  b: {data["b"]:9}  c: {data["c"]:9}')


        # adv (0)
        if opcode == 0:
            res,rem = divmod(data["a"],2 ** comboOperand)
            data["a"] = res

        # bxl (1)
        elif opcode == 1:
            res = data["b"] ^ operand
            data["b"] = res

        # bst (2)
        elif opcode == 2:
            res,rem = divmod(comboOperand,8)
            data["b"] = rem

        # jnz (3)
        elif opcode == 3:
            if data["a"] > 0:
                data["ptr"] = operand
                alreadyJumped = True

        # bxc (4)
        elif opcode == 4:
            res = data["b"] ^ data["c"]
            data["b"] = res

        # out (5)
        elif opcode == 5:
            res,rem = divmod(comboOperand,8)
            data["output"].append(rem)

        # bdv (6)
        elif opcode == 6:
            res,rem = divmod(data["a"],2 ** comboOperand)
            data["b"] = res

        # cdv (7)
        elif opcode == 7:
            res,rem = divmod(data["a"],2 ** comboOperand)
            data["c"] = res

        if not alreadyJumped:
            data["ptr"] += 2

    # if opcode == 5:
    #     pd(f'output: {data["output"][-1]}')

    return result
    

pattern = r"(\d+)"
def parseInput(input):
    temp = [int(a) for a in re.findall(pattern,''.join(input))]
    data = {
        "a": temp.pop(0),
        "b": temp.pop(0),
        "c": temp.pop(0),
        "instructions": temp,
        "ptr": 0,
        "output": []
    }
    return data

debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

data = parseInput(sourceInput)
pd(data)
original = copy.deepcopy(data)

while computeNext(data):
    pass

output = ','.join([str(a) for a in data["output"]])
p(output)

output = ','.join([str(a) for a in original["instructions"]])
p(output)

def compareOutput(data):
    pos = len(data["output"])
    pd(','.join([str(a) for a in data["output"]]))
    pd(','.join([str(a) for a in data["instructions"][-pos:]]))


def findPrevious(data,thisStartValue,pos):
    pd(f"pos: {pos}, start: {thisStartValue}")
    result = None
    for delta in range(8):
        tryValue = thisStartValue + delta
        tryData = copy.deepcopy(data)
        tryData["a"] = tryValue

        while computeNext(tryData):
            pass

        pd(f'tryValue: {tryValue}  tryResult: {tryData["output"][0]}  expected: {tryData["instructions"][-(pos+1)]}')

        if tryData["output"][0] == tryData["instructions"][-(pos+1)]:
            compareOutput(tryData)
            if pos == len(data["instructions"])-1:
                result = tryValue
                pd(f"FOUND IT! - {result}")
                break
            else:
                result = findPrevious(data,tryValue*8,pos+1)
                if result:
                    break
    return result



thisStartValue = 1

startValue = findPrevious(original,thisStartValue,0)

tryData = copy.deepcopy(data)
tryData["a"] = startValue
while computeNext(tryData):
    pass

# output = ','.join([str(a) for a in tryData["output"]])
# p(output)

# output = ','.join([str(a) for a in original["instructions"]])
# p(output)
