#!/usr/bin/python3
import sys
import fileinput
import json
import math
import re
import copy
from datetime import datetime
import itertools

debug=True

def p(obj,timePrefix = False, newLine = True):
    if newLine:
        end = "\n"
    else:
        end = ""

    if timePrefix:
        now = datetime.now()
        print('{}: '.format(str(now.time()).split('.')[0]),end="")

    if type(obj) in [str,int]:
        print(obj,end=end)
    else:
        if timePrefix:
            print('')
        print(json.dumps(obj, indent=2),end=end)

def pd(obj,timePrefix = False,newLine = True):
    if debug:
        p(obj,timePrefix=timePrefix,newLine=newLine)

def pdCharGrid(grid):
    if debug:
        for y in range(len(grid)):
            pd(''.join(grid[y]))

def wait():
    if debug:
        input("Press Enter to continue...")

def getInput():
    fileRows = []
    with open(sys.argv[1], 'r') as file:
        for line in file:
            fileRows.append(line.rstrip())
    
    return fileRows

# pass multiple lines
# 1 integer per line
def arrayOfIntFromList(input):
    rows = [int(c) for c in input]
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.strip())])
    return rows

# pass multiple lines
# returns a 2 dimensional array
def arrayFromGridOfSpaceSeparatedDigits(input):
    rows = []
    for line in input:
        rows.append([int(c) for c in list(line.split(" "))])
    return rows

# one line in returns an array
def arrayOfStrFromCSV(line):
    return list(line.strip().split(','))

# one line in returns an array
def arrayOfIntFromCSV(line):
    return [int(i) for i in line.strip().split(',')]
    
# one line in returns an array
def arrayOfWordsFromString(line):
    return list(line.strip().split())

def readData():
    rows = []
    for line in fileinput.input():
        # rows.append(line.strip())
        rows.append([int(c) for c in list(line.strip())])
        # [int(i) for i in line.strip().split(',')]

    return rows

def findBlankLine(lines):
    for i in range(len(lines)):
        if (lines[i].strip() == ""):
            return i

def keyInit(dict,key,initialValue):
    if (key not in dict):
        dict[key] = initialValue

def getGrid(grid,x,y,outOfBoundsObj=None):
    result = None
    if x<0 or x>=len(grid[0]) or y<0 or y>=len(grid):
        result = outOfBoundsObj
    else:
        result = grid[y][x]
    return result

def setGrid(grid,x,y,obj):
    grid[y][x] = obj

def setBit(value,bit):
    return value | (1<<bit)

def clearBit(value,bit):
    return value & ~(1<<bit)

def getBit(value,bit):
    return value & 1 << bit != 0 

pattern=r"(-?\d+)"
def parseInput(input):
    data=[]
    for line in input:
        this = {}
        this["posx"], this["posy"], this["velx"], this["vely"] = [int(c) for c in re.findall(pattern=pattern,string=line)]
        data.append(this)
    return data

    

debug = True

sourceInput = getInput()

# data = arrayFromGridOfDigits(sourceInput)
# p(data)

robots = parseInput(sourceInput)
pd(robots)

width = 101
height = 103
centerx = (width-1)/2
centery = (height-1)/2

def pRobots(robots):
    for y in range(height):
        for x in range(width):
            count = 0
            for r in robots:
                if r["posx"] == x and r["posy"] == y:
                    count += 1
            if count==0:
                char="."
            else:
                char=str(count)
            pd(char,newLine=False)
        pd("")

time = 100



# for i in range (-20,20):
#     pd(f"{i}: {divmod(i,width)}")

q = [0,0,0,0]

for robot in robots:
    robot["posx"] = (robot["posx"] + robot["velx"] * time) % width
    robot["posy"] = (robot["posy"] + robot["vely"] * time) % height

    if robot["posx"] < centerx and robot["posy"] < centery:
        q[0] += 1
    elif robot["posx"] > centerx and robot["posy"] < centery:
        q[1] += 1
    elif robot["posx"] < centerx and robot["posy"] > centery:
        q[2] += 1
    elif robot["posx"] > centerx and robot["posy"] > centery:
        q[3] += 1 
pd(robots)
pRobots(robots)
pd(q)

result = q[0] * q[1] * q[2] * q[3]

p(result)